name: Base Image Info (Dev)

on:
  push:
    paths:
      - ".github/workflows/baseimage_dev.yml"
  pull_request:
    paths:
      - ".github/workflows/baseimage_dev.yml"
  repository_dispatch:
  workflow_dispatch:

jobs:
  base:
    name: ${{ matrix.image_name }} - ${{ matrix.arch }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        image_name: ["alpine:latest", "debian:latest", "ubuntu:latest"]
        arch: ["amd64", "arm64"]
    steps:
      - name: Setup environment
        run: |
          sudo apt-get -qq update
          sudo apt-get -qq install -y skopeo jq

      - name: Fetch and Store Layer Info
        run: |
          readonly repo="${{ matrix.image_name }}"
          readonly arch="${{ matrix.arch }}"

          echo "Inspecting image: ${repo} for platform: linux/${arch}"

          # Handle ARM variant extraction if needed
          variant=""
          current_arch="${arch}"
          if [[ "${arch}" =~ arm/v ]]; then
            variant="${arch#*/}"
            current_arch="${arch%/*}"
          fi

          # Single skopeo call with all necessary data extraction
          data_json=$(skopeo inspect \
            --override-os="linux" \
            --override-arch="${current_arch}" \
            ${variant:+--override-variant="${variant}"} \
            --format=json \
            "docker://docker.io/${repo}")

          # Create image info file with safe filename (replace colon with dash)
          readonly safe_repo_name="${repo//:/-}"
          readonly output_file="/tmp/image_${safe_repo_name/\//_}_${arch}.json"

          # Create complete layer info in one jq operation and save to file
          echo "${data_json}" | jq --compact-output \
            --arg image "${repo}" \
            --arg arch "${arch}" \
            '{
              image: $image,
              architecture: $arch,
              layers: .Layers,
              layer_count: (.Layers | length),
              size: .Size,
              digest: .Digest
            }' > "${output_file}"

          echo "Saved layer info to: ${output_file}"

          # Create safe artifact name and save to environment
          readonly safe_artifact_name="layer-info-${safe_repo_name/\//_}-${arch}"
          echo "ARTIFACT_NAME=${safe_artifact_name}" >> "${GITHUB_ENV}"

      - name: Upload Layer Info
        uses: actions/upload-artifact@main
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: /tmp/image_*.json
          retention-days: 1

  collect:
    name: Show Aggregated Layers from All Matrix Jobs
    runs-on: ubuntu-latest
    needs: base
    steps:
      - name: Download All Layer Info
        uses: actions/download-artifact@main
        with:
          pattern: layer-info-*
          path: /tmp/layer-data
          merge-multiple: true

      - name: Process Results
        run: |
          echo "=== Docker Base Images Layer Information ==="

          readonly data_dir="/tmp/layer-data"

          # Check if we have any data files
          if [[ ! -d "${data_dir}" ]] || [[ -z "$(find "${data_dir}" -name "*.json" -type f)" ]]; then
            echo "‚ùå No valid image data collected"
            exit 1
          fi

          echo "=== Individual Image Analysis ==="
          echo

          # Process each JSON file
          for json_file in "${data_dir}"/*.json; do
            if [[ -f "${json_file}" ]]; then
              jq --raw-output '
                "üì¶ Image: \(.image) (\(.architecture))",
                "   Layers: \(.layer_count)",
                "   Size: \(.size // "null") bytes", 
                "   Digest: \(.digest[0:19])...",
                if (.layer_count <= 5) then
                  "   Layer hashes:",
                  (.layers[] | "     - \(.)")
                else
                  "   Layer hashes (first 3 and last 2):",
                  (.layers[0:3][] | "     - \(.)"),
                  "     ... (\(.layer_count - 5) more layers) ...",
                  (.layers[-2:][] | "     - \(.)")
                end,
                ""
              ' "${json_file}"
            fi
          done
