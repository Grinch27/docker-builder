name: Base Image Info (Dev)

on:
  push:
    paths:
      - ".github/workflows/baseimage_dev.yml"
  pull_request:
    paths:
      - ".github/workflows/baseimage_dev.yml"
  repository_dispatch:
  workflow_dispatch:

env:
  DIR_ARTIFACT: /tmp/layer-data

jobs:
  base:
    name: ${{ matrix.docker }} - ${{ matrix.arch }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        docker: ["ubuntu:latest", "debian:latest", "alpine:latest"]
        arch: ["amd64", "arm64"]
    steps:
      - name: Setup environment
        run: |
          sudo -E apt-get -yqq update
          sudo -E apt-get -yqq install skopeo jq
          mkdir -p "${{ env.DIR_ARTIFACT }}"

      - name: "skopeo inspect ${{ matrix.docker }} - linux/${{ matrix.arch }}"
        id: skopeo-inspect
        run: |
          readonly repo="${{ matrix.docker }}"
          readonly arch="${{ matrix.arch }}"
          # Create image info file with safe filename (replace colon with dash)
          readonly safe_repo_name="${repo//:/-}"
          readonly output_file="${{ env.DIR_ARTIFACT }}/image_${safe_repo_name/\//_}_${arch}.json"

          # Single skopeo call with all necessary data extraction
          data_json=$(skopeo inspect \
            --override-os="linux" \
            --override-arch="${{ matrix.arch }}" \
            ${variant:+--override-variant="${variant}"} \
            --format=json \
            "docker://docker.io/${{ matrix.docker }}")

          # Debug: Print full raw data for troubleshooting
          echo "=== DEBUG: Full skopeo inspect output for ${{ matrix.docker }} (${{ matrix.arch }}) ==="
          echo "${data_json}" | jq '.'
          echo "=== END DEBUG OUTPUT ==="

          # Create complete layer info in one jq operation and save to file
          echo "${data_json}" | jq --compact-output \
            --arg image "${{ matrix.docker }}" \
            --arg arch "${{ matrix.arch }}" \
            '{
              image: $image,
              architecture: $arch,
              raw_data: .
            }' > "${output_file}"

          echo "Saved complete image info to: ${output_file}"

          # Create safe artifact name and save to environment
          readonly safe_artifact_name="layer-info-${safe_repo_name/\//_}-${arch}"
          echo "ARTIFACT_NAME=${safe_artifact_name}" >> "${GITHUB_ENV}"

      - name: Upload Layer Info
        uses: actions/upload-artifact@main
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.DIR_ARTIFACT }}/image_*.json
          retention-days: 1

  collect:
    name: Layers from All Matrix Jobs
    runs-on: ubuntu-latest
    needs: base
    steps:
      - name: Download All Layer Info
        uses: actions/download-artifact@main
        with:
          pattern: layer-info-*
          path: ${{ env.DIR_ARTIFACT }}
          merge-multiple: true

      - name: Process Results
        run: |
          echo "=== Docker Base Images Layer Information ==="

          readonly data_dir="${{ env.DIR_ARTIFACT }}"

          # Process each JSON file
          for json_file in "${data_dir}"/*.json; do
            if [[ -f "${json_file}" ]]; then
              jq --raw-output '
                " > Image: \(.image) (\(.architecture))",
                "   Size: " + (
                  if .raw_data.Size != null then 
                    (.raw_data.Size | tostring) + " bytes"
                  elif .raw_data.LayersData != null then
                    (.raw_data.LayersData | map(.Size) | add | tostring)
                  else 
                    "unknown"
                  end
                ),
                "   Digest: " + (.raw_data.Digest // "unknown"),
                "   All Layer hashes:",
                (.raw_data.Layers[] | "     - \(.)")
              ' "${json_file}"
              echo
            fi
          done

          # 汇总所有层信息
          echo "=== Layer Summary Across All Images ==="
          tmp_layers=$(mktemp)

          # 提取所有层信息到临时文件
          for json_file in "${data_dir}"/*.json; do
            [[ ! -f "${json_file}" ]] && continue
            jq -r --arg img "$(jq -r '.image' "${json_file}")" \
               --arg arch "$(jq -r '.architecture' "${json_file}")" \
               '.raw_data.Layers[] | $img + "," + $arch + "," + .' "${json_file}" >> "${tmp_layers}"
          done

          # 分析层信息并输出
          if [[ -s "${tmp_layers}" ]]; then
            # 1. 显示共享层
            echo "🔄 Shared Layers:"
            sort "${tmp_layers}" | awk -F, '{print $3}' | sort | uniq -c | sort -nr | 
            while read count layer; do
              if [[ "${count}" -gt 1 ]]; then
                echo "  ${layer:0:19}... (${count} images):"
                grep "${layer}" "${tmp_layers}" | awk -F, '{print "   - " $1 " (" $2 ")"}' | sort
              fi
            done
            
            # 2. 显示每个镜像的层数量及修正大小显示
            echo -e "\n📊 Layer Count Per Image:"
            for json_file in "${data_dir}"/*.json; do
              [[ ! -f "${json_file}" ]] && continue
              img=$(jq -r '.image' "${json_file}")
              arch=$(jq -r '.architecture' "${json_file}")
              layer_count=$(jq -r '.raw_data.Layers | length' "${json_file}")
              
              # 修正大小信息 - 先尝试从Size获取，如为null则从LayersData中计算
              size=$(jq -r '
                if .raw_data.LayersData != null then 
                  (.raw_data.LayersData | map(.Size) | add | tostring) + " bytes"
                else 
                  "size unknown"
                end
              ' "${json_file}")
              
              echo "  ${img} (${arch}): ${layer_count} layers, ${size}"
            done
            
            # 3. 显示所有唯一层的总体情况
            total_unique_layers=$(sort "${tmp_layers}" | awk -F, '{print $3}' | sort -u | wc -l)
            total_layers=$(wc -l < "${tmp_layers}")
            echo -e "\n📈 Overall Statistics:"
            echo "  Total layers across all images: ${total_layers}"
            echo "  Unique layers: ${total_unique_layers}"
            
            # 避免除以零错误
            if [[ "${total_layers}" -gt 0 ]]; then
              reuse_ratio=$(( (total_layers - total_unique_layers) * 100 / total_layers ))
              echo "  Reuse ratio: ${reuse_ratio}%"
            fi
          fi
