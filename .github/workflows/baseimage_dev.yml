name: Base Image Info (Dev)

on:
  push:
    paths:
      - ".github/workflows/baseimage_dev.yml"
  pull_request:
    paths:
      - ".github/workflows/baseimage_dev.yml"
  repository_dispatch:
  workflow_dispatch:

jobs:
  base:
    name: ${{ matrix.image_name }} - ${{ matrix.arch }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        image_name: ["alpine:latest", "debian:latest", "ubuntu:latest"]
        arch: ["amd64", "arm64"]
    outputs:
      matrix_data: ${{ steps.output.outputs.matrix_data }}
    steps:
      - name: Setup environment
        run: |
          sudo apt-get -qq update
          sudo apt-get -qq install -y skopeo jq

      - name: Fetch Layer Info
        id: base
        run: |
          readonly repo="${{ matrix.image_name }}"
          readonly arch="${{ matrix.arch }}"

          echo "Inspecting image: ${repo} for platform: linux/${arch}"

          # Handle ARM variant extraction if needed
          local variant=""
          if [[ "${arch}" =~ arm/v ]]; then
            variant="${arch#*/}"
            arch="${arch%/*}"
          fi

          # Single skopeo call with all necessary data extraction
          data_json=$(skopeo inspect \
            --override-os="linux" \
            --override-arch="${arch}" \
            ${variant:+--override-variant="${variant}"} \
            --format=json \
            "docker://docker.io/${repo}")

          # Create complete layer info in one jq operation
          layer_info=$(echo "${data_json}" | jq --compact-output \
            --arg image "${repo}" \
            --arg arch "${{ matrix.arch }}" \
            '{
              image: $image,
              architecture: $arch,
              layers: .Layers,
              layer_count: (.Layers | length),
              size: .Size,
              digest: .Digest
            }')

          echo "layer_info=${layer_info}" >> "${GITHUB_OUTPUT}"

      - name: Set Matrix Output
        id: output
        run: |
          # Create matrix data entry with consistent key format
          matrix_entry=$(echo '${{ steps.base.outputs.layer_info }}' | jq --compact-output \
            --arg key "${{ matrix.image_name }}-${{ matrix.arch }}" \
            '{
              key: ($key | gsub(":"; "-")),
              data: .
            }')

          echo "matrix_data=${matrix_entry}" >> "${GITHUB_OUTPUT}"

  collect:
    name: Show Aggregated Layers from All Matrix Jobs
    runs-on: ubuntu-latest
    needs: base
    steps:
      - name: Process Results
        run: |
          echo "=== Docker Base Images Layer Information ==="

          # Collect all matrix outputs
          readonly all_outputs='${{ toJSON(needs.base.outputs) }}'

          # Process and display results efficiently
          echo "${all_outputs}" | jq -r '.matrix_data // empty' | jq -s \
            --raw-output '
            map(select(. != null)) as $all_data |
            if ($all_data | length) > 0 then
              (
                "=== Individual Image Analysis ===",
                "",
                ($all_data[] | 
                  .data as $info |
                  "📦 Image: \($info.image) (\($info.architecture))",
                  "   Layers: \($info.layer_count)",
                  "   Size: \($info.size) bytes",
                  "   Digest: \($info.digest[0:19])...",
                  if ($info.layer_count <= 5) then
                    "   Layer hashes:",
                    ($info.layers[] | "     - \(.)")
                  else
                    "   Layer hashes (first 3 and last 2):",
                    ($info.layers[0:3][] | "     - \(.)"),
                    "     ... (\($info.layer_count - 5) more layers) ...",
                    ($info.layers[-2:][] | "     - \(.)")
                  end,
                  ""
                )
              )
            else
              "❌ No valid image data collected"
            end'

      - name: Generate Summary Report
        run: |
          echo "=== Summary Report ==="

          readonly all_outputs='${{ toJSON(needs.base.outputs) }}'

          # Generate comprehensive statistics in single jq operation
          echo "${all_outputs}" | jq -r '.matrix_data // empty' | jq -s \
            --raw-output '
            map(select(. != null) | .data | select(. != null and has("architecture") and has("image"))) as $all_data |
            if ($all_data | length) > 0 then
              {
                total_images: ($all_data | length),
                images_by_arch: (
                  $all_data |
                  group_by(.architecture) |
                  map({key: .[0].architecture, value: length}) |
                  from_entries
                ),
                layer_stats: (
                  $all_data |
                  map(.layer_count) |
                  {
                    min: min, 
                    max: max, 
                    avg: (add / length | floor),
                    distribution: (group_by(.) | map({layers: .[0], count: length}))
                  }
                ),
                size_stats: (
                  $all_data |
                  map(.size // 0) |
                  {
                    min: min,
                    max: max, 
                    avg: (add / length | floor),
                    total: add
                  }
                )
              } |
              "📊 Statistics:",
              "Total images analyzed: \(.total_images)",
              "",
              "Images by architecture:",
              (.images_by_arch | to_entries | map("  - \(.key): \(.value) images") | join("\n")),
              "",
              "Layer count statistics:",
              "  - Min layers: \(.layer_stats.min)",
              "  - Max layers: \(.layer_stats.max)", 
              "  - Avg layers: \(.layer_stats.avg)",
              "  - Layer distribution:",
              (.layer_stats.distribution | map("    * \(.layers) layers: \(.count) images") | join("\n")),
              "",
              "Size statistics:",
              "  - Total size: \(.size_stats.total) bytes",
              "  - Avg size: \(.size_stats.avg) bytes",
              "  - Size range: \(.size_stats.min) - \(.size_stats.max) bytes"
            else
              "No valid image data was collected.",
              "Debug info:",
              input
            end'
                  {
                    min: min,
                    max: max, 
                    avg: (add / length),
                    total: add
                  }
                )
              }
            else
              {
                total_images: 0,
                images_by_arch: {},
                layer_stats: {min: 0, max: 0, avg: 0, distribution: []},
                size_stats: {min: 0, max: 0, avg: 0, total: 0}
              }
            end
          ')
          echo "📊 Statistics:"
          total_count=$(echo "$summary" | jq -r '.total_images')
          if [ "$total_count" -gt 0 ]; then
            echo "$summary" | jq -r '
              "Total images analyzed: \(.total_images)",
              "",
              "Images by architecture:",
              (.images_by_arch | to_entries | map("  - \(.key): \(.value) images") | join("\n")),
              "",
              "Layer count statistics:",
              "  - Min layers: \(.layer_stats.min)",
              "  - Max layers: \(.layer_stats.max)", 
              "  - Avg layers: \(.layer_stats.avg | floor)",
              "  - Layer distribution:",
              (.layer_stats.distribution | map("    * \(.layers) layers: \(.count) images") | join("\n")),
              "",
              "Size statistics:",
              "  - Total size: \(.size_stats.total) bytes",
              "  - Avg size: \(.size_stats.avg | floor) bytes",
              "  - Size range: \(.size_stats.min) - \(.size_stats.max) bytes"
            '
          else
            echo "No valid image data was collected."
            echo "Debug info:"
            echo "$all_outputs" | jq .
          fi
