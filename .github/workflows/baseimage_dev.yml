name: Base Image Info (Dev)

on:
  push:
    paths:
      - ".github/workflows/base_dev.yml"
  pull_request:
    paths:
      - ".github/workflows/base_dev.yml"
  repository_dispatch:
  workflow_dispatch:

jobs:
  base:
    name: ${{ matrix.image_name }} - ${{ matrix.arch }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        image_name: ["alpine:latest", "debian:latest", "ubuntu:latest"]
        os: ["linux"]
        arch: ["amd64", "arm64"]
    steps:
      - name: Fetch and Upload Layer Info
        run: |
          sudo apt-get -qq update
          sudo apt-get -qq install -y ca-certificates curl gpg skopeo jq

          repo="${{ matrix.image_name }}"
          os="${{ matrix.os }}"
          arch="${{ matrix.arch }}"
          echo "Inspecting image: $repo for platform: $os/$arch"

          # 获取镜像信息并直接生成结果
          data_json=$(skopeo inspect \
            --override-os="${os}" \
            --override-arch="${arch}" \
            --format=json \
            docker://docker.io/"${repo}")

          # 创建结果 JSON
          result=$(echo "$data_json" | jq -c --arg image "$repo" --arg arch "$arch" --arg os "$os" '{
            image: $image,
            architecture: $arch,
            os: $os,
            layers: .Layers,
            layer_count: (.Layers | length),
            size: .Size,
            digest: .Digest
          }')

          # 创建清理后的文件名并保存
          clean_name=$(echo "$repo" | sed 's/:/-/g')
          mkdir -p /tmp/results
          echo "$result" > "/tmp/results/${clean_name}-${arch}.json"

          echo "✅ Processed $repo ($arch): $(echo "$result" | jq -r '.layer_count') layers"

      - name: Upload Results
        uses: actions/upload-artifact@v4
        with:
          name: layer-info-${{ matrix.image_name }}-${{ matrix.arch }}
          path: /tmp/results/
          retention-days: 1
        env:
          # 处理 artifact 名称中的特殊字符
          MATRIX_IMAGE: ${{ matrix.image_name }}

  show-all-layers:
    name: Show Aggregated Results
    runs-on: ubuntu-latest
    needs: base
    steps:
      - name: Download and Process Results
        uses: actions/download-artifact@v4
        with:
          pattern: layer-info-*
          path: /tmp/all-results
          merge-multiple: true

      - name: Generate Report
        run: |
          echo "=== Docker Base Images Layer Information ==="

          # 直接读取所有 JSON 文件并合并
          jq -s '.' /tmp/all-results/*.json > /tmp/combined.json

          echo "Found $(jq 'length' /tmp/combined.json) results"
          echo
          echo "=== Individual Image Analysis ==="

          # 处理每个镜像
          jq -r '.[] | @json' /tmp/combined.json | while read -r info; do
            echo "$info" | jq -r '
              "📦 Image: \(.image) (\(.architecture))",
              "   Layers: \(.layer_count)",
              "   Size: \(.size) bytes", 
              "   Digest: \(.digest[0:19])..."
            '
            
            layer_count=$(echo "$info" | jq -r '.layer_count')
            if [ "$layer_count" -le 5 ]; then
              echo "   Layer hashes:"
              echo "$info" | jq -r '.layers[] | "     - " + .'
            else
              echo "   Layer hashes (first 3 and last 2):"
              echo "$info" | jq -r '.layers[0:3][] | "     - " + .'
              echo "     ... ($((layer_count - 5)) more layers) ..."
              echo "$info" | jq -r '.layers[-2:][] | "     - " + .'
            fi
            echo
          done

          echo "=== Summary Report ==="

          # 生成统计报告
          jq -r '
            "📊 Statistics:",
            "Total images analyzed: \(length)",
            "",
            "Images by architecture:",
            (group_by(.architecture) | map("  - \(.[0].architecture): \(length) images") | join("\n")),
            "",
            "Layer count statistics:",
            "  - Min layers: \(map(.layer_count) | min)",
            "  - Max layers: \(map(.layer_count) | max)",
            "  - Avg layers: \(map(.layer_count) | add / length | floor)",
            "  - Layer distribution:",
            (map(.layer_count) | group_by(.) | map("    * \(.[0]) layers: \(length) images") | join("\n")),
            "",
            "Size statistics:",
            "  - Total size: \(map(.size) | add) bytes",
            "  - Avg size: \(map(.size) | add / length | floor) bytes",
            "  - Size range: \(map(.size) | min) - \(map(.size) | max) bytes"
          ' /tmp/combined.json
                results_array=$(echo "$results_array" | jq ". + [$content]")
              fi
            done
          fi

          echo "Found $(echo "$results_array" | jq 'length') results"
          echo

          echo "=== Individual Image Analysis ==="
          echo

          # 处理每个镜像的层信息
          echo "$results_array" | jq -r '.[]' | while read -r layer_info; do
            if [ -n "$layer_info" ] && [ "$layer_info" != "null" ]; then
              image_name=$(echo "$layer_info" | jq -r '.image // "unknown"')
              arch=$(echo "$layer_info" | jq -r '.architecture // "unknown"')
              layer_count=$(echo "$layer_info" | jq -r '.layer_count // 0')
              size=$(echo "$layer_info" | jq -r '.size // 0')
              digest=$(echo "$layer_info" | jq -r '.digest // "unknown"')
              
              echo "📦 Image: $image_name ($arch)"
              echo "   Layers: $layer_count"
              echo "   Size: $(numfmt --to=iec $size 2>/dev/null || echo "$size bytes")"
              echo "   Digest: ${digest:0:19}..."
              
              if [ "$layer_count" -le 5 ]; then
                echo "   Layer hashes:"
                echo "$layer_info" | jq -r '.layers[]? // empty' | sed 's/^/     - /'
              else
                echo "   Layer hashes (first 3 and last 2):"
                echo "$layer_info" | jq -r '.layers[0:3][]? // empty' | sed 's/^/     - /'
                echo "     ... ($(($layer_count - 5)) more layers) ..."
                echo "$layer_info" | jq -r '.layers[-2:][]? // empty' | sed 's/^/     - /'
              fi
              echo
            fi
          done

      - name: Generate Summary Report
        run: |
          echo "=== Summary Report ==="
          echo

          # 收集所有 JSON 文件并创建数组
          results_array="[]"
          if [ -d "/tmp/all-results" ]; then
            for json_file in /tmp/all-results/*.json; do
              if [ -f "$json_file" ]; then
                content=$(cat "$json_file")
                results_array=$(echo "$results_array" | jq ". + [$content]")
              fi
            done
          fi

          # 创建汇总统计
          summary=$(echo "$results_array" | jq '
            map(select(. != null and has("architecture") and has("image"))) as $all_data |
            if ($all_data | length) > 0 then
              {
                total_images: ($all_data | length),
                images_by_arch: (
                  $all_data |
                  group_by(.architecture) |
                  map({key: .[0].architecture, value: length}) |
                  from_entries
                ),
                layer_stats: (
                  $all_data |
                  map(.layer_count) |
                  {
                    min: min, 
                    max: max, 
                    avg: (add / length),
                    distribution: (group_by(.) | map({layers: .[0], count: length}))
                  }
                ),
                size_stats: (
                  $all_data |
                  map(.size // 0) |
                  select(length > 0) |
                  {
                    min: min,
                    max: max, 
                    avg: (add / length),
                    total: add
                  }
                )
              }
            else
              {
                total_images: 0,
                images_by_arch: {},
                layer_stats: {min: 0, max: 0, avg: 0, distribution: []},
                size_stats: {min: 0, max: 0, avg: 0, total: 0}
              }
            end
          ')

          echo "📊 Statistics:"
          total_count=$(echo "$summary" | jq -r '.total_images')
          if [ "$total_count" -gt 0 ]; then
            echo "$summary" | jq -r '
              "Total images analyzed: \(.total_images)",
              "",
              "Images by architecture:",
              (.images_by_arch | to_entries | map("  - \(.key): \(.value) images") | join("\n")),
              "",
              "Layer count statistics:",
              "  - Min layers: \(.layer_stats.min)",
              "  - Max layers: \(.layer_stats.max)", 
              "  - Avg layers: \(.layer_stats.avg | floor)",
              "  - Layer distribution:",
              (.layer_stats.distribution | map("    * \(.layers) layers: \(.count) images") | join("\n")),
              "",
              "Size statistics:",
              "  - Total size: \(.size_stats.total) bytes",
              "  - Avg size: \(.size_stats.avg | floor) bytes",
              "  - Size range: \(.size_stats.min) - \(.size_stats.max) bytes"
            '
          else
            echo "No valid image data was collected."
          fi
