name: Base Image Info (Dev)

on:
  push:
    paths:
      - ".github/workflows/base_dev.yml"
  pull_request:
    paths:
      - ".github/workflows/base_dev.yml"
  repository_dispatch:
  workflow_dispatch:

run-name: Base Image Info

jobs:
  base:
    name: ${{ matrix.image_name }} - ${{ matrix.arch }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        image_name: ["alpine:latest", "debian:latest", "ubuntu:latest"]
        os: ["linux"]
        arch: ["amd64", "arm64"]
    outputs:
      # 使用动态输出，收集所有矩阵作业的结果
      results: ${{ steps.collect.outputs.results }}
    steps:
      - name: Setup environment
        run: |
          sudo apt-get -qq update
          sudo apt-get -qq install -y ca-certificates curl gpg skopeo jq

      - name: Fetch Layer Info
        id: base
        run: |
          repo="${{ matrix.image_name }}"
          os="${{ matrix.os }}"
          arch="${{ matrix.arch }}"
          echo "Inspecting image: $repo for platform: $os/$arch"

          variant=""
          if echo "${arch}" | grep -q "arm/v"; then
            variant=$(echo "${arch}" | cut -d'/' -f2)
            arch=$(echo "${arch}" | cut -d'/' -f1)
          fi

          data_json=$(skopeo inspect \
            --override-os="${os}" \
            --override-arch="${arch}" \
            ${variant:+--override-variant="${variant}"} \
            --format=json \
            docker://docker.io/"${repo}")

          # 从 data_json 中提取各层的名称，按换行分隔
          layers_text=$(echo "$data_json" | jq -r '.Layers[]')

          echo "Layers for $repo:"
          echo "$layers_text"

          # 创建包含镜像信息的JSON对象，确保正确转义
          layer_info=$(echo "$data_json" | jq --arg image "$repo" --arg arch "${{ matrix.arch }}" --arg os "${{ matrix.os }}" '{
            image: $image,
            architecture: $arch,
            os: $os,
            layers: .Layers,
            layer_count: (.Layers | length)
          }')

          echo "Layer info JSON:"
          echo "$layer_info"

          # 将层信息写入输出，使用多行文本格式
          {
            echo "layer_info<<EOF"
            echo "$layer_info"
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Set Matrix Output
        id: output
        run: |
          # 创建唯一的输出键名
          output_key="${{ matrix.image_name }}-${{ matrix.arch }}"
          output_key=$(echo "$output_key" | sed 's/:/-/g')

          echo "Setting output for key: $output_key"

          # 获取层信息并确保是有效的 JSON
          layer_info='${{ steps.base.outputs.layer_info }}'

          # 验证 JSON 是否有效
          if echo "$layer_info" | jq . >/dev/null 2>&1; then
            # 将 JSON 作为单行字符串输出
            layer_info_compressed=$(echo "$layer_info" | jq -c .)
            echo "result=${layer_info_compressed}" >> $GITHUB_OUTPUT
          else
            echo "Warning: Invalid JSON for $output_key, setting empty result..."
            echo "result={}" >> $GITHUB_OUTPUT
          fi

      - name: Collect Results
        id: collect
        run: |
          # 将当前矩阵作业的结果包装成数组格式
          result='${{ steps.output.outputs.result }}'
          if [ -n "$result" ] && [ "$result" != "{}" ]; then
            echo "results=[$result]" >> $GITHUB_OUTPUT
          else
            echo "results=[]" >> $GITHUB_OUTPUT
          fi

  show-all-layers:
    name: Show Aggregated Layers from All Matrix Jobs
    runs-on: ubuntu-latest
    needs: base
    steps:
      - name: Aggregated Output
        run: |
          echo "=== Docker Base Images Layer Information ==="
          echo

          # 收集所有输出 - 现在是一个简单的数组
          all_results='${{ toJSON(needs.base.outputs.results) }}'
          echo "Raw results from matrix jobs:"
          echo "$all_results"
          echo

          echo "=== Individual Image Analysis ==="
          echo

          # 处理结果数组
          echo "$all_results" | jq -r '.[]' | while read -r layer_info; do
            if [ -n "$layer_info" ] && [ "$layer_info" != "null" ] && [ "$layer_info" != "{}" ]; then
              echo "Processing layer info..."
              
              # 解析 JSON
              if parsed_info=$(echo "$layer_info" | jq . 2>/dev/null); then
                image_name=$(echo "$parsed_info" | jq -r '.image // "unknown"')
                arch=$(echo "$parsed_info" | jq -r '.architecture // "unknown"')
                layer_count=$(echo "$parsed_info" | jq -r '.layer_count // 0')
                
                echo "📦 Image: $image_name ($arch)"
                echo "   Layers: $layer_count"
                echo "   Layer hashes:"
                echo "$parsed_info" | jq -r '.layers[]? // empty' | sed 's/^/     - /'
                echo
              else
                echo "❌ Failed to parse layer info"
                echo "   Raw value: $layer_info"
                echo
              fi
            fi
          done

      - name: Generate Summary Report
        run: |
          echo "=== Summary Report ==="
          echo

          all_results='${{ toJSON(needs.base.outputs.results) }}'

          # 创建汇总统计
          summary=$(echo "$all_results" | jq '
            map(select(. != null and . != {} and .image != null)) as $valid_data |
            if ($valid_data | length) > 0 then
              {
                total_images: ($valid_data | length),
                images_by_arch: (
                  $valid_data | 
                  group_by(.architecture // "unknown") | 
                  map({
                    arch: (.[0].architecture // "unknown"), 
                    count: length
                  }) |
                  reduce .[] as $item ({}; .[$item.arch] = $item.count)
                ),
                layer_stats: (
                  $valid_data | 
                  map(.layer_count // 0) | 
                  {min: min, max: max, avg: (add / length)}
                )
              }
            else
              {
                total_images: 0,
                images_by_arch: {},
                layer_stats: {min: 0, max: 0, avg: 0}
              }
            end
          ')

          echo "📊 Statistics:"
          if [ "$(echo "$summary" | jq -r '.total_images')" -gt 0 ]; then
            echo "$summary" | jq -r '
              "Total images analyzed: \(.total_images)",
              "Images by architecture:",
              (.images_by_arch | to_entries | map("  - \(.key): \(.value) images") | join("\n")),
              "Layer count statistics:",
              "  - Min layers: \(.layer_stats.min)",
              "  - Max layers: \(.layer_stats.max)", 
              "  - Avg layers: \(.layer_stats.avg | floor)"
            '
          else
            echo "No valid image data was collected."
            echo "Debug: All results:"
            echo "$all_results"
          fi
              "Layer count statistics:",
              (if .layer_stats.min != null then
                "  - Min layers: \(.layer_stats.min)",
                "  - Max layers: \(.layer_stats.max)", 
                "  - Avg layers: \(.layer_stats.avg | floor)"
              else
                "  - No layer statistics available"
              end)
            '
          else
            echo "No valid image data was collected."
            echo "Debug: All outputs structure:"
            echo "$all_outputs" | jq .
          fi
