name: (Dev) build

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      app_branch:
        description: "App Branch"
        type: string
        required: true
        default: "adguardvpn-cli"
      tag_repo:
        description: "Tag Push to Repo"
        type: string
        required: true
        default: "latest"
      custom_env:
        description: "key=value;key=value"
        type: string
        required: false
        default: ""

env:
  app_branch: ${{ inputs.app_branch }}
  tag_repo: ${{ inputs.tag_repo || 'latest' }}
  dir_app: "application/${{ inputs.app_branch }}"
  custom_env: ${{ inputs.custom_env || '' }}

jobs:
  build:
    name: Test build
    runs-on: ubuntu-24.04
    permissions:
      contents: write
      pull-requests: write
    env:
      registry_local: "localhost:5000"
      version: ${{ needs.check.outputs.version || 'null' }}
      consistent: ${{ needs.check.outputs.consistent || 'false'}}
    steps:
      - name: Checkout ${{ github.repository }}
        uses: actions/checkout@main

      - name: (Log in) to Docker Hub
        if: ${{ 'true' == 'false' }} # disable
        uses: docker/login-action@master
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: (Env) Load .env files
        id: env-app
        working-directory: "${{ github.workspace }}/${{ env.dir_app }}"
        run: |
          echo "Current working directory: $(pwd)"

          dir_step="env"
          dir_original=$(pwd)
          if [ -d "${dir_step}" ]; then
            cd ./${dir_step}
            echo "Changed to directory: $(pwd)"

            for env_file in ./*.env; do
              if [ -f "${env_file}" ]; then
                echo "Loading env file: ${env_file}"
                cat "${env_file}" | awk -F= '/^[a-zA-Z_][a-zA-Z0-9_]*=/ {printf "%s=%s\n", $1, $2}' | tee -a $GITHUB_ENV
              fi
            done

            cd "${dir_original}"
            echo "Changed back to original directory: $(pwd)"
          else
            echo "No directory found"
          fi

          echo "status=success" | tee -a ${GITHUB_OUTPUT}

      - name: (Env) Load Custom inputs
        id: env-custom
        if: ${{ env.custom_env != '' }}
        env:
          flag_split: ";"
        working-directory: /
        run: |
          echo "${{ env.custom_env }}" | tr '${{ env.flag_split }}' '\n' | tee -a $GITHUB_ENV

      - name: Initialize environment
        id: init
        env:
          DEBIAN_FRONTEND: noninteractive
        working-directory: /
        run: |
          echo -e "Current working directory: $(pwd)"
          
          packages_install=(
            "ca-certificates"
            "curl"
            "gpg"
            "skopeo"
            "jq"
            "xz-utils"
          )
          sudo -E apt-get -y -qq update
          sudo -E apt-get -y -qq install "${packages_install[@]}"
          sudo -E apt-get -qq -y autoremove --purge
          sudo -E apt-get -qq clean
          sudo -E systemctl daemon-reload

          echo "status=success" | tee -a ${GITHUB_OUTPUT}

      - name: Setup Docker
        id: docker
        env:
          DEBIAN_FRONTEND: noninteractive
        working-directory: /
        run: |
          # https://docs.docker.com/engine/install/ubuntu/

          # ===== 1. Set up Docker's apt repository =====
          # Add Docker's official GPG key:
          # sudo apt-get update
          # sudo apt-get install ca-certificates curl
          sudo install -m 0755 -d /etc/apt/keyrings
          sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
          sudo chmod a+r /etc/apt/keyrings/docker.asc

          # Add the repository to Apt sources:
          echo \
            "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
            $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
            sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update

          # ===== 2. Install the Docker packages =====
          sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

          docker --version
          echo "status=success" | tee -a ${GITHUB_OUTPUT}

      - name: Setup QEMU
        id: qemu
        uses: docker/setup-qemu-action@master
        with:
          platforms: ${{ env.arch_branch }}

      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master
        with:
          version: latest
          driver-opts: network=host

      - name: (Service) Local Registry
        id: registry
        env:
          DEBIAN_FRONTEND: noninteractive
        working-directory: /
        run: |
          docker pull registry:latest
          docker run \
            --name registry \
            --detach \
            --network host \
            registry:latest
          echo "status=success" | tee -a ${GITHUB_OUTPUT}

      - name: Build and push to local registry
        id: build
        working-directory: "${{ github.workspace }}/${{ env.dir_app }}"
        run: |
          echo "Current working directory: $(pwd)"

          dir_step="build"
          dir_original=$(pwd)
          if [ -d "${dir_step}" ]; then
            cd ./${dir_step}
            echo "Changed to directory: $(pwd)"

            for script_file in ./*.sh; do
              chmod +x "${script_file}"
              sh "${script_file}"
            done

            cd "${dir_original}"
            echo "Changed back to original directory: $(pwd)"
          else
            echo "No directory found"
          fi

          echo "status=success" | tee -a ${GITHUB_OUTPUT}

      - name: (Inspect) Layers with skopeo
        id: inspect
        # if: ${{ 'true' == 'false' }} # disable
        working-directory: "${{ github.workspace }}/${{ env.dir_app }}"
        run: |
          echo "Current working directory: $(pwd)"

          IFS=',' read -ra platforms <<< "${{ env.arch_branch }}"
          for platform in "${platforms[@]}"; do
            os=$(echo ${platform} | cut -d'/' -f1)
            arch=$(echo ${platform} | cut -d'/' -f2-)
            
            variant=""
            if echo "${arch}" | grep -q "arm/v"; then
              variant=$(echo ${arch} | cut -d'/' -f2)
              arch=$(echo ${arch} | cut -d'/' -f1)
            fi
            
            skopeo inspect \
              --override-os=${os} \
              --override-arch=${arch} \
              ${variant:+--override-variant=${variant}} \
              --format=json \
              --tls-verify=false \
              docker://${{ env.registry_local }}/${{ env.repo_dockerhub }}:${{ env.tag_repo }}
          done
          echo "status=success" | tee -a ${GITHUB_OUTPUT}

      - name: (Test) Docker image
        id: test
        env:
          container_name: container-test
          dir_container: "/tmp"
        working-directory: "${{ github.workspace }}/${{ env.dir_app }}"
        run: |
          echo "Current working directory: $(pwd)"

          IFS=',' read -ra platforms <<< "${{ env.arch_branch }}"
          for platform in "${platforms[@]}"; do
            docker pull --platform $platform ${{ env.registry_local }}/${{ env.repo_dockerhub }}:${{ env.tag_repo }}
            docker run \
              --name ${{ env.container_name }} \
              --rm \
              --detach \
              --platform $platform \
              ${{ env.registry_local }}/${{ env.repo_dockerhub }}:${{ env.tag_repo }}
              # /bin/sh -c "uname -a && sleep infinity"

            dir_step="test"
            dir_original=$(pwd)
            if [ -d "${dir_step}" ]; then
              cd ./${dir_step}
              echo "Changed to directory: $(pwd)"

              set +e
              log_container=$(mktemp)
              # docker exec -u root ${{ env.container_name }} mkdir -p ${{ env.dir_container }}
              
              for script_file in ./*.sh; do
                container_script="${{ env.dir_container }}/$(basename ${script_file})"
                script_temp=$(mktemp)
                {
                  echo "#!/bin/sh"
                  printenv | awk -F= '/^[a-zA-Z_][a-zA-Z0-9_]*=/ {printf "%s=\"%s\"\n", $1, $2}'
                  cat "${script_file}"
                } > ${script_temp}

                docker cp ${script_temp} ${{ env.container_name }}:${container_script}
                docker exec -u root ${{ env.container_name }} chmod +x ${container_script}
                docker exec -u root ${{ env.container_name }} sh -c "${container_script}" | tee -a ${log_container}
              done
              set -e

              cd "${dir_original}"
              echo "Changed back to original directory: $(pwd)"
            else
              echo "No directory found"
            fi
            
            sleep 10
            docker logs ${{ env.container_name }}
            docker stop ${{ env.container_name }}
          done
          echo "status=success" | tee -a ${GITHUB_OUTPUT}

      - name: (Output) Save
        id: output
        # if: ${{ 'true' == 'false' }} # disable
        env:
          dir_output: "${{ github.workspace }}/${{ env.dir_app }}/output"
          target_ext: "tar"
        working-directory: "${{ github.workspace }}/${{ env.dir_app }}"
        run: |
          echo "Current working directory: $(pwd)"

          mkdir -p ${{ env.dir_output }}

          IFS=',' read -ra platforms <<< "${{ env.arch_branch }}"
          for platform in "${platforms[@]}"; do
            target_file="${{ env.app_branch }}_${{ env.tag_repo }}_${{ env.version }}_$(echo ${platform} | tr '/' '_').${{ env.target_ext }}"
            
            docker pull --platform ${platform} ${{ env.registry_local }}/${{ env.repo_dockerhub }}:${{ env.tag_repo }}
            docker tag ${{ env.registry_local }}/${{ env.repo_dockerhub }}:${{ env.tag_repo }} ${{ env.repo_dockerhub }}:${{ env.tag_repo }}
            docker save --output ${{ env.dir_output }}/${target_file} ${{ env.repo_dockerhub }}:${{ env.tag_repo }}
            
            echo "Exported ${platform} image to ${target_file}"
            ls -lh "${{ env.dir_output }}/${target_file}"
          done
          
          echo "dir_output=${{ env.dir_output }}" | tee -a $GITHUB_ENV
          echo "target_ext=${{ env.target_ext }}" | tee -a $GITHUB_ENV
          echo "status=success" | tee -a ${GITHUB_OUTPUT}

      - name: (Output) Compress
        id: output-compress
        if: ${{ env.compress && env.compress != '' }} && steps.output.outputs.status == 'success' && !cancelled()
        # if: ${{ 'true' == 'false' }} # disable
        env:
          dir_output: ${{ env.dir_output }}
          target_ext: "${{ env.target_ext || 'tar' }}"
        working-directory: "${{ env.dir_output }}"
        run: |
          echo -e "Current working directory: $(pwd)"
          ls -lh ./

          free -h
          available_mem=$(free -m | awk '/^Mem:/{print $7}')
          echo "Available memory: ${available_mem} MiB"
          reserve_mem=2048
          if [ "${available_mem}" -gt 6144 ]; then
            memlimit=$((${available_mem} - ${reserve_mem}))
            memlimit="${memlimit}MiB"
          else
            memlimit="4GiB"
          fi
          echo "Set memlimit: ${memlimit}"

          for file in ${{ env.dir_output }}/*.${{ env.target_ext }}; do
            if [[ ! -d "${file}" ]]; then
              # For compression level -9, each thread may use approximately 67 MiB to 768 MiB or more of memory.
              xz --compress \
                --threads=0 \
                -9 \
                --extreme \
                --memlimit-compress=${memlimit} \
                --check=sha256 \
                --verbose \
                --keep \
                "${file}"
            fi
          done

          ls -lh ./
          echo "target_ext=xz" | tee -a $GITHUB_ENV
          echo "status=success" | tee -a ${GITHUB_OUTPUT}

      - name: (Output) Check
        id: output-check
        if: steps.output.outputs.status == 'success' && !cancelled()
        # if: ${{ 'true' == 'false' }} # disable
        env:
          metadata_sum_path: "${{ github.workspace }}/metadata_sum.json"
          category: "files"
          target_ext: "tar"
        working-directory: "${{ env.dir_output }}"
        run: |
          echo -e "Current working directory: $(pwd)"
          ls -lh ./

          metadata='{"${{ env.category }}":[]}'
          for file in ./*.${{ env.target_ext }}; do
            if [[ ! -d "${file}" ]]; then
              read -r checksum filename <<< "$(sha256sum "${file}")"
              filename=$(basename "${filename}")
              metadata=$(jq \
                --arg filename "${filename}" \
                --arg checksum "${checksum}" \
                '.${{ env.category }} += [{filename: $filename, checksum: $checksum}]' <<< "${metadata}")
            fi
          done
          echo "metadata=${metadata}"
          echo "${metadata}" | jq . > ${{ env.metadata_sum_path }}

          echo "timestamp=$(date +"%y%mw%V")" | tee -a ${GITHUB_OUTPUT}
          echo "metadata_sum_path=${metadata_sum_path}" | tee -a ${GITHUB_OUTPUT}
          echo "status=success" | tee -a ${GITHUB_OUTPUT}

      - name: (release.md) Generate
        id: release-md
        if: ${{ 'true' == 'false' }} # disable
        env:
          release_md: "${{ github.workspace }}/${{ env.dir_app }}/release.md"
          metadata_sum_path: ${{ steps.output-check.outputs.metadata_sum_path }}
        working-directory: "${{ github.workspace }}/${{ env.dir_app }}"
        run: |
          echo "Current working directory: $(pwd)"

          release_md_dir=$(dirname ${{ env.release_md }})
          mkdir -p ${release_md_dir}
          : > ${{ env.release_md }}

          record_to_markdown() {
            local title="$1"
            local content="$2"
            local code_block="${3:-}"
            local format="\n### %s\n%s\n"

            if [[ -n "${code_block}" ]]; then
              format="\n### %s\n\n<details>\n<summary>%s</summary>\n\n\`\`\`%s\n%s\n\`\`\`\n\n</details>\n"
              printf "${format}" "${title}" "${title}" "${code_block}" "${content}" | tee -a ${{ env.release_md }}
            else
              printf "${format}" "${title}" "${content}" | tee -a ${{ env.release_md }}
            fi
          }
          
          record_to_markdown "Timestamp" "- [x] $(date +"%Y-%m-%d %H:%M:%S %z")"

          IFS=',' read -ra registries <<< "${{ env.registry_push }}" >> ${{ env.release_md }}
          for registry_remote in "${registries[@]}"; do
            echo -e "### Info\n" >> ${{ env.release_md }}
            echo "Registry: ${registry_remote}" >> ${{ env.release_md }}
            echo "Repository: ${{ env.repo_dockerhub }}" >> ${{ env.release_md }}
            echo "docker pull ${registry_remote}/${{ env.repo_dockerhub }}:\*"  >> ${{ env.release_md }}
            echo "docker xz -d *.xz" >> ${{ env.release_md }}
            echo "docker load < \*.tar" >> ${{ env.release_md }}
          done

          sum_json_content=$(jq '.' "${{ env.metadata_sum_path }}")
          record_to_markdown "sha256sum" "${sum_json_content}" "json"

          cat ${{ env.release_md }}
          echo "release_md=${{ env.release_md }}" | tee -a $GITHUB_ENV
          echo "status=success" | tee -a ${GITHUB_OUTPUT}

      - name: (Push) Image to ${{ env.registry_push }}
        id: push
        if: ${{ 'true' == 'false' }} # disable
        working-directory: "${{ github.workspace }}/${{ env.dir_app }}"
        run: |
          echo "Current working directory: $(pwd)"
          declare -a tag_array=("${{ env.tag_repo }}")
          tag_version="${{ env.tag_repo }}-${{ env.version }}"

          dir_step="push"
          dir_original=$(pwd)
          if [ -d "${dir_step}" ]; then
            cd ./${dir_step}
            echo "Changed to directory: $(pwd)"

            for script_file in ./*.sh; do
              chmod +x "${script_file}"
              source "${script_file}"
            done

            cd "${dir_original}"
            echo "Changed back to original directory: $(pwd)"
          else
            echo "No directory found"
          fi

          if [ "${{ env.consistent }}" == "true" ] && [ -n "${tag_version}" ]; then
            tag_array+=("${tag_version}")
          fi

          IFS=',' read -ra registries <<< "${{ env.registry_push }}"
          for registry_remote in "${registries[@]}"; do
            for tag_each in "${tag_array[@]}"; do
              docker buildx imagetools create --tag "${registry_remote}/${{ env.repo_dockerhub }}:${tag_each}" "${{ env.registry_local }}/${{ env.repo_dockerhub }}:${{ env.tag_repo }}"
              # skopeo inspect --format=json docker://${registry_remote}/${{ env.repo_dockerhub }}:${tag_each}
            done
          done

          echo "status=success" | tee -a ${GITHUB_OUTPUT}

      - name: (Output) Upload to Release
        id: output-release
        # if: steps.output.outputs.status == 'success' && !cancelled()
        if: ${{ 'true' == 'false' }} # disable
        uses: ncipollo/release-action@main
        env:
          dir_output: "${{ env.dir_output }}"
          target_ext: "${{ env.target_ext }}"
          release_md: "${{ env.release_md }}"
        with:
          name: "${{ env.repo_dockerhub }}"
          tag: "${{ env.app_branch }}"
          artifacts: "${{ env.dir_output }}/*.${{ env.target_ext }}"
          allowUpdates: true
          removeArtifacts: false
          replacesArtifacts: true
          token: "${{ secrets.GITHUB_TOKEN }}"
          bodyFile: "${{ env.release_md }}"
