name: Fetch (Dev)

run-name: Fetch Matrix for Docker

on:
  repository_dispatch:
  workflow_dispatch:

jobs:
  fetch:
    uses: ./.github/workflows/callable-fetch-layers.yml
    strategy:
      fail-fast: false
      matrix:
        image_name:
          [
            "debian:latest",
            "ubuntu:latest",
            "alpine:latest",
            "debian:sid",
            "ubuntu:devel",
          ]
        # os: ["linux"]
        # arch: ["amd64", "arm64"]
    with:
      image_name: ${{ matrix.image_name }}
      # os: ${{ matrix.os }}
      # arch: ${{ matrix.arch }}

  collect:
    name: Aggregate Layer Information
    needs: fetch
    runs-on: ubuntu-latest
    outputs:
      base_layers: ${{ steps.combine-layers.outputs.base_layers }}
    steps:
      - name: Download all layer artifacts
        uses: actions/download-artifact@main
        with:
          path: /tmp/layer-artifacts

      - name: Combine layer information
        id: combine-layers
        run: |
          # 创建基础JSON对象用于存储所有基础镜像的层信息
          base_layers='{}'

          # 处理所有矩阵任务的输出
          for artifact_dir in /tmp/layer-artifacts/layers-*; do
            [ -d "$artifact_dir" ] || continue
            artifact_base=$(basename "$artifact_dir")
            # 去掉前缀/后缀获得下划线版本镜像名 (layers-<sanitized>-linux)
            sanitized=$(echo "$artifact_base" | sed 's/^layers-\(.*\)-linux$/\1/')
            # 还原镜像名: 第一个 _ -> : 其余 _ -> /
            image_name=$(echo "$sanitized" | sed 's/_/:/' | sed 's/_/\//g')

            # 遍历匹配 layer-*.json (允许未来扩展多个文件)
            for json_file in "$artifact_dir"/layer-*.json; do
              [ -f "$json_file" ] || continue
              layers_content=$(cat "$json_file")
              # 若已存在同镜像键则合并内部对象
              base_layers=$(jq --arg img "$image_name" --argjson obj "$layers_content" '
                . as $root
                | if has($img) then .[$img] = (.[$img] + $obj) else . + {($img): $obj} end
              ' <<< "$base_layers")
            done
          done

          echo "Combined layers information:"
          echo "$base_layers" | jq .

          # 输出紧凑的JSON对象
          echo "base_layers=$(echo "$base_layers" | jq -c .)" >> $GITHUB_OUTPUT

      - name: Show aggregated layer information
        run: |
          echo "Aggregated layers information by image and architecture:"
          echo '${{ steps.combine-layers.outputs.base_layers }}' | jq .
