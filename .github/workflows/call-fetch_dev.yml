name: Fetch (Dev)

run-name: Fetch Matrix for Docker

on:
  repository_dispatch:
  workflow_dispatch:

jobs:
  fetch-layers:
    name: Fetch Docker layers (Matrix)
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        # 同时针对多个镜像、多个平台
        image_name: ["alpine:latest", "debian:latest", "ubuntu:latest"]
        arch_branch: ["linux/amd64", "linux/arm64"]
    steps:
      - name: Setup environment
        run: |
          sudo apt-get -qq update
          sudo apt-get -qq install -y ca-certificates curl gpg skopeo jq

      - name: (MetaData) from DockerHub
        id: meta-image
        env:
          category: "repository"
        run: |
          # 初始化存储元数据的 JSON
          metadata='{"repository":[]}'

          # 当前 job 的 matrix 中有单个镜像和单个平台
          repo="${{ matrix.image_name }}"
          platform="${{ matrix.arch_branch }}"

          echo "Inspecting image: $repo for platform: $platform"

          # 分割平台信息 (例: linux/amd64, linux/arm64)
          os=$(echo "$platform" | cut -d'/' -f1)
          arch=$(echo "$platform" | cut -d'/' -f2-)

          variant=""
          # 如果是 arm/vX 这种形式
          if echo "${arch}" | grep -q "arm/v"; then
            variant=$(echo "${arch}" | cut -d'/' -f2)
            arch=$(echo "${arch}" | cut -d'/' -f1)
          fi

          # 用 skopeo 获取镜像 metadata
          data_json=$(skopeo inspect \
            --override-os="${os}" \
            --override-arch="${arch}" \
            ${variant:+--override-variant="${variant}"} \
            --format=json \
            docker://docker.io/"${repo}" | jq .)

          # 将当前镜像和对应平台的数据合并到 metadata 里
          metadata=$(jq \
            --argjson data "${data_json}" \
            --arg platform "${platform}" \
            --arg repo "${repo}" \
            '.repository += [{name: $repo, platform: $platform, data: $data}]' <<< "${metadata}")

          echo "${metadata}" | jq . > layers_summary_${repo//[:\/]/_}_${platform//\//_}.json
          echo "status=success" | tee -a ${GITHUB_OUTPUT}

      - name: (Check) Layer MetaData
        id: check-layer
        run: |
          # 从上一步保存的文件中读取 metadata
          meta_file="layers_summary_${{ matrix.image_name//[:\/]/_ }}_${{ matrix.arch_branch//\//_ }}.json"
          if [ ! -f "$meta_file" ]; then
            echo "No metadata file found: $meta_file"
            exit 1
          fi

          echo "Reading metadata from: $meta_file"
          metadata_image=$(cat "$meta_file")

          # 此处可以根据需要对多个镜像进行对比，也可扩展更多逻辑
          # 下面示例简单输出 Layers
          layers=$(echo "${metadata_image}" | jq -r '.repository[].data.Layers | @sh')
          echo "Layers found:"
          echo "${layers}"

          changed=false
          # 如果需要比对其他镜像的层，可以在此处添加逻辑，
          # 例如对比 base_image 与 repo_dockerhub 同平台下的差异
          # 这里仅示例输出
          echo "changed=${changed}" | tee -a ${GITHUB_OUTPUT}
          echo "status=success" | tee -a ${GITHUB_OUTPUT}

      - name: Show summary
        run: |
          meta_file="layers_summary_${{ matrix.image_name//[:\/]/_ }}_${{ matrix.arch_branch//\//_ }}.json"
          echo "Final summary for $meta_file:"
          cat "$meta_file"
