name: Fetch (Dev)

run-name: Fetch Matrix for Docker

on:
  repository_dispatch:
  workflow_dispatch:

jobs:
  fetch-layers:
    name: Docker Layers - ${{ matrix.image_name }} on ${{ matrix.os }}/${{ matrix.arch }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        image_name: ["alpine:latest", "debian:latest", "ubuntu:latest"]
        os: ["linux"]
        arch: ["amd64", "arm64"]
    outputs:
      layers: ${{ steps.meta_image.outputs.layers }}
    steps:
      - name: Setup environment
        run: |
          sudo apt-get -qq update
          sudo apt-get -qq install -y ca-certificates curl gpg skopeo jq

      - name: Get Docker MetaData from DockerHub
        id: meta_image
        run: |
          repo="${{ matrix.image_name }}"
          platform="${{ matrix.os }}/${{ matrix.arch }}"
          echo "Inspecting image: $repo for platform: $platform"

          # 获取 os 与 arch，不做额外转换（如没遇到特殊情况）
          os="${{ matrix.os }}"
          arch="${{ matrix.arch }}"
          variant=""
          if echo "${arch}" | grep -q "arm/v"; then
            variant=$(echo "${arch}" | cut -d'/' -f2)
            arch=$(echo "${arch}" | cut -d'/' -f1)
          fi

          # 利用 skopeo 拉取镜像元数据，并格式化输出
          data_json=$(skopeo inspect \
            --override-os="${os}" \
            --override-arch="${arch}" \
            ${variant:+--override-variant="${variant}"} \
            --format=json \
            docker://docker.io/"${repo}" | jq .)

          echo "MetaData for $repo on $platform:"
          echo "${data_json}" | jq .

          # 提取镜像层信息，假定在 .Layers 属性中，如果镜像没有该属性，可以根据实际情况修改
          layers=$(echo "${data_json}" | jq -c '.Layers')
          echo "Layers: $layers"

          # 将 layers 作为输出传递下游作业（注意输出为单行 JSON 字符串）
          echo "layers=$layers" >> "$GITHUB_OUTPUT"

      - name: Display Docker Layers in Log
        run: |
          # 从前一步骤输出中获取 layers 输出
          layers="${{ steps.meta_image.outputs.layers }}"
          echo "Docker layers for image ${{ matrix.image_name }} on platform ${{ matrix.os }}/${{ matrix.arch }}:"
          # 逐行输出每一层（假设 layers 为 JSON 数组）
          echo "$layers" | jq -r '.[]'

  show-all-layers:
    name: Show Aggregated Layers from All Matrix Jobs
    runs-on: ubuntu-latest
    needs: fetch-layers
    steps:
      - name: Aggregated Output
        run: |
          echo "Aggregated Docker Layers outputs (JSON map):"
          echo "${{ toJSON(needs.fetch-layers.outputs) }}"
