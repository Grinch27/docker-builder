name: Fetch (Dev)

run-name: Fetch Matrix for Docker

on:
  repository_dispatch:
  workflow_dispatch:

jobs:
  fetch-layers:
    name: ${{ matrix.image_name }} - ${{ matrix.os }}/${{ matrix.arch }}
    runs-on: ${{ matrix.runner_image || 'ubuntu-latest' }}
    strategy:
      fail-fast: false
      matrix:
        runner_image: ["ubuntu-latest"]
        image_name: ["alpine:latest", "debian:latest", "ubuntu:latest"]
        os: ["linux"]
        arch: ["amd64", "arm64"]
    outputs:
      layers_obj: ${{ steps.assemble-layers.outputs.layers_obj }}
    steps:
      - name: Setup environment
        run: |
          sudo apt-get -qq update
          sudo apt-get -qq install -y ca-certificates curl gpg skopeo jq

      - name: Fetch Layer Info
        id: fetch-layers
        run: |
          repo="${{ matrix.image_name }}"
          platform="${{ matrix.os }}/${{ matrix.arch }}"
          echo "Inspecting image: $repo for platform: $platform"

          os="${{ matrix.os }}"
          arch="${{ matrix.arch }}"
          variant=""
          if echo "${arch}" | grep -q "arm/v"; then
            variant=$(echo "${arch}" | cut -d'/' -f2)
            arch=$(echo "${arch}" | cut -d'/' -f1)
          fi

          # 获取镜像数据
          data_json=$(skopeo inspect \
            --override-os="${os}" \
            --override-arch="${arch}" \
            ${variant:+--override-variant="${variant}"} \
            --format=json \
            docker://docker.io/"${repo}" | jq .)

          # 提取 layers 数组 (已是 JSON 数组字符串)
          layers=$(echo "${data_json}" | jq -c '.Layers')

          echo "Data JSON:"
          echo "${data_json}" | jq .
          echo "Layers (JSON array string): $layers"

          # 将提取到的 layers 写入 Step Output，供后续步骤使用
          echo "layers=$layers" | tee -a ${GITHUB_OUTPUT}

      - name: Assemble Layers JSON
        id: assemble-layers
        run: |
          repo="${{ matrix.image_name }}"
          os="${{ matrix.os }}"
          arch="${{ matrix.arch }}"

          # 从上一步 output 中取出
          layers="${{ steps.fetch-layers.outputs.layers }}"

          echo "Key generation (example: 'alpine-linux-amd64'):"
          key="${repo//[:\/]/-}-${os}-${arch}"
          echo "Key: $key"

          # 根据 key 和 layers 组装 { "alpine-linux-amd64": [ ... ] }
          layers_obj=$(jq -n --arg key "$key" --argjson layers "$layers" '{($key): $layers}')

          echo "layers_obj=$layers_obj" | tee -a ${GITHUB_OUTPUT}

  show-all-layers:
    name: Show Aggregated Layers from All Matrix Jobs
    runs-on: ubuntu-latest
    needs: fetch-layers
    steps:
      - name: Aggregated Output
        run: |
          echo "Aggregated Docker Layers outputs (JSON map):"
          echo "${{ toJSON(needs.fetch-layers.outputs) }}"
