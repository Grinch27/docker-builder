name: Fetch (Dev)

run-name: Fetch Matrix for Docker

on:
  repository_dispatch:
  workflow_dispatch:

jobs:
  fetch:
    uses: ./.github/workflows/callable-fetch-layers.yml
    strategy:
      fail-fast: false
      matrix:
        image_name:
          [
            "debian:latest",
            "ubuntu:latest",
            "alpine:latest",
            "debian:sid",
            "ubuntu:devel",
          ]
    with:
      image_name: ${{ matrix.image_name }}

  collect:
    name: Collect Layers
    needs: fetch
    runs-on: ubuntu-latest
    outputs:
      base_layers_file: ${{ steps.combine-layers.outputs.base_layers_file }}
      aggregated_layers_file: ${{ steps.merge-all.outputs.aggregated_layers_file }}
    steps:
      - name: Download all layer artifacts
        uses: actions/download-artifact@main
        with:
          path: /tmp/layer-artifacts

      - name: Check every json
        run: |
          set -e
          for f in /tmp/layer-artifacts/layers-*/layer-*.json; do
            echo "Checking $f"
            jq . "$f" || { echo "Invalid JSON in $f"; exit 1; }
          done

      - name: Combine layer information
        id: combine-layers
        env:
          BASE_LAYERS_FILE: /tmp/base_layers.json
        run: |
          set -e
          base_layers='{}'
          for artifact_dir in /tmp/layer-artifacts/layers-*; do
            [ -d "$artifact_dir" ] || continue
            artifact_base=$(basename "$artifact_dir")
            sanitized=$(echo "$artifact_base" | sed 's/^layers-\(.*\)-linux$/\1/')
            image_name=$(echo "$sanitized" | sed 's/_/:/' | sed 's/_/\//g')
            for json_file in "$artifact_dir"/layer-*.json; do
              [ -f "$json_file" ] || continue
              layers_content=$(cat "$json_file")
              base_layers=$(jq --arg img "$image_name" --argjson obj "$layers_content" '
                if has($img) then .[$img] = (.[$img] + $obj) else . + {($img): $obj} end
              ' <<< "$base_layers")
            done
          done
          echo "$base_layers" | jq . > ${{ env.BASE_LAYERS_FILE }}
          echo "Per-image layers saved to ${{ env.BASE_LAYERS_FILE }}"
          # 只输出文件名而非大 JSON
          echo "base_layers_file=${{ env.BASE_LAYERS_FILE }}" >> "$GITHUB_OUTPUT"

      - name: Merge All Layers
        id: merge-all
        env:
          BASE_LAYERS_FILE: ${{ steps.combine-layers.outputs.base_layers_file }}
        run: |
          set -e
          [ -f "$BASE_LAYERS_FILE" ] || { echo "File $BASE_LAYERS_FILE not found"; exit 1; }
          # 汇总所有镜像的 Layers，去重。允许缺失某些对象的 Layers 字段
          jq '{Layers: ([ .[]? | .Layers?[] ] | unique)}' "$BASE_LAYERS_FILE" > aggregated_layers.json
          echo "Aggregated unified layers (deduplicated):"
          jq '. | {Total: (.Layers|length)}' aggregated_layers.json
          jq . aggregated_layers.json
          echo "aggregated_layers_file=aggregated_layers.json" >> "$GITHUB_OUTPUT"
