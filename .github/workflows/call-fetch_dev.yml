name: Fetch (Dev)

run-name: Fetch Matrix for Docker

on:
  repository_dispatch:
  workflow_dispatch:

jobs:
  fetch-layers:
    uses: ./.github/workflows/callable-fetch-layers.yml
    strategy:
      fail-fast: false
      matrix:
        image_name:
          [
            "debian:latest",
            "ubuntu:latest",
            "alpine:latest",
            "debian:sid",
            "ubuntu:devel",
          ]
        os: ["linux"]
        arch: ["amd64", "arm64"]
    with:
      image_name: ${{ matrix.image_name }}
      # os: ${{ matrix.os }}
      # arch: ${{ matrix.arch }}

  aggregate-layers:
    name: Aggregate Layer Information
    needs: fetch-layers
    runs-on: ubuntu-latest
    outputs:
      base_layers: ${{ steps.combine-layers.outputs.base_layers }}
    steps:
      - name: Download all layer artifacts
        uses: actions/download-artifact@main
        with:
          path: /tmp/layer-artifacts

      - name: Combine layer information
        id: combine-layers
        run: |
          # 创建基础JSON对象用于存储所有基础镜像的层信息
          base_layers='{}'

          # 处理所有矩阵任务的输出
          for artifact_dir in /tmp/layer-artifacts/layers-*; do
            if [ -d "$artifact_dir" ]; then
              # 提取镜像名称，将下划线转回冒号以匹配原始格式
              artifact_base=$(basename "$artifact_dir")
              image_part=$(echo "$artifact_base" | sed 's/^layers-\(.*\)-\(amd64\|arm64\)$/\1/')
              arch_part=$(echo "$artifact_base" | sed 's/^layers-.*-\(amd64\|arm64\)$/\1/')
              
              # 将下划线转回冒号（仅第一个下划线，因为这是替换tag的冒号）
              image_name=$(echo "$image_part" | sed 's/_/:/' | sed 's/_/\//')
              
              if [ -f "$artifact_dir/layers.json" ]; then
                # 读取层信息并添加到base_layers
                layers_content=$(cat "$artifact_dir/layers.json")
                base_layers=$(jq --arg image "${image_name}_${arch_part}" \
                  --argjson layers "$layers_content" \
                  '. + {($image): $layers}' <<< "$base_layers")
              fi
            fi
          done

          echo "Combined layers information:"
          echo "$base_layers" | jq .

          # 输出紧凑的JSON对象
          echo "base_layers=$(echo "$base_layers" | jq -c .)" >> $GITHUB_OUTPUT

      - name: Show aggregated layer information
        run: |
          echo "Aggregated layers information by image and architecture:"
          echo '${{ steps.combine-layers.outputs.base_layers }}' | jq .
