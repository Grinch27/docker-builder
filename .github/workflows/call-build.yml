name: Call Build

on:
  schedule:
    # cloudflare-warp
    - cron: "0 22 * * *"
    # adguardvpn-cli
    - cron: "10 22 * * *"
    - cron: "10 22 * * *"
    - cron: "10 22 * * *"
    # expressvpn
    - cron: "20 22 * * *"
    # nordvpn
    - cron: "20 22 * * *"
    # squid
    - cron: "30 22 * * *"
    # vlmcsd
    - cron: "30 22 * * *"
    # novnc
    - cron: "40 22 * * *"
    # baidunetdisk
    - cron: "40 22 * * *"
    # steamcmd
    - cron: "50 22 * * *"
    # runner
    - cron: "0 23 * * *"
    # runner:slim
    - cron: "0 23 * * *"
    # runner:actions
    - cron: "0 23 * * *"
    # runner:actions-slim
    - cron: "0 23 * * *"
  repository_dispatch:
  workflow_dispatch:
    inputs:
      force_build:
        description: "Force build"
        type: choice
        required: false
        default: "false"
        options:
          - "true"
          - "false"
      force_push:
        description: "Force push"
        type: choice
        required: false
        default: "false"
        options:
          - "true"
          - "false"

env:
  force_build: ${{ inputs.force_build || 'false' }}
  force_push: ${{ inputs.force_push || 'false' }}

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        schedule_build:
          # cloudflare-warp
          - {
              time: "0 22 * * *",
              app_branch: "cloudflare-warp",
              tag_repo: "latest",
            }
          # adguardvpn-cli
          - {
              time: "10 22 * * *",
              app_branch: "adguardvpn-cli",
              tag_repo: "nightly",
              custom_env: "build_arg='update_channel=nightly'",
            }
          - {
              time: "10 22 * * *",
              app_branch: "adguardvpn-cli",
              tag_repo: "beta",
              custom_env: "build_arg='update_channel=beta'",
            }
          - {
              time: "10 22 * * *",
              app_branch: "adguardvpn-cli",
              tag_repo: "release",
              custom_env: "build_arg='update_channel=release'",
            }
          # expressvpn
          - {
              time: "20 22 * * *",
              app_branch: "expressvpn",
              tag_repo: "latest",
            }
          # nordvpn
          - { time: "20 22 * * *", app_branch: "nordvpn", tag_repo: "latest" }
          # squid
          - { time: "30 22 * * *", app_branch: "squid", tag_repo: "latest" }
          # vlmcsd
          - { time: "30 22 * * *", app_branch: "vlmcsd", tag_repo: "latest" }
          # novnc
          - { time: "40 22 * * *", app_branch: "novnc", tag_repo: "latest" }
          # baidunetdisk
          - { time: "40 22 * * *", app_branch: "baidunetdisk", tag_repo: "dev" }
          # steamcmd
          - { time: "50 22 * * *", app_branch: "steamcmd", tag_repo: "dev" }
          # runner
          - {
              time: "0 23 * * *",
              app_branch: "runner",
              tag_repo: "dev",
              custom_env: "",
            }
          # runner:slim
          - {
              time: "0 23 * * *",
              app_branch: "runner",
              tag_repo: "slim",
              custom_env: "dockerfile=slim.Dockerfile",
            }
          # runner:actions
          - {
              time: "0 23 * * *",
              app_branch: "runner",
              tag_repo: "actions",
              custom_env: "dockerfile=actions.Dockerfile",
            }
          # runner:actions-slim
          - {
              time: "0 23 * * *",
              app_branch: "runner",
              tag_repo: "actions-slim",
              custom_env: "dockerfile=actions-slim.Dockerfile",
            }

    steps:
      - name: Time Check
        id: time
        shell: bash
        working-directory: /
        run: |
          if [ "${{ env.force_build }}" = "true" ] || { [ "${{ github.event_name }}" = "schedule" ] && [ "${{ github.event.schedule }}" = "${{ matrix.schedule_build.time }}" ]; }; then
            echo "status=success" | tee -a ${GITHUB_OUTPUT}
          else
            echo "status=failure" | tee -a ${GITHUB_OUTPUT}
          fi

      - name: Trigger workflow
        id: trigger
        if: steps.time.outputs.status == 'success' && !cancelled()
        # if: ${{ github.event_name == 'schedule' && github.event.schedule == matrix.schedule_build.time }}
        env:
          branch: "main"
          workflow: "build-docker"
        working-directory: /
        run: |
          # Create base JSON using jq
          data=$(jq -n \
            --arg app_branch "${{ matrix.schedule_build.app_branch }}" \
            --arg tag_repo "${{ matrix.schedule_build.tag_repo }}" \
            --arg force_push "${{ env.force_push }}" \
            '{ ref: "${{ env.branch }}", inputs: { app_branch: $app_branch, tag_repo: $tag_repo, force_push: $force_push } }')

          # Check if 'custom_env' is defined and not empty, then add it
          if [[ -n "${{ matrix.schedule_build.custom_env }}" ]]; then
            data=$(echo "$data" | jq --arg custom_env "${{ matrix.schedule_build.custom_env }}" '.inputs.custom_env = $custom_env')
          fi

          # Output the final JSON data for debugging (optional)
          echo "$data" | jq .

          # Use the generated data with curl
          curl -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: Bearer ${{ secrets.PAT }}" \
            https://api.github.com/repos/${{ github.repository }}/actions/workflows/${{ env.workflow }}.yml/dispatches \
            --data "$data"
