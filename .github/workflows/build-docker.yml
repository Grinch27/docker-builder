name: Build Docker

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      app_branch:
        description: "App Branch"
        type: string
        required: true
        default: "adguardvpn-cli"
      tag_repo:
        description: "Tag Push to Repo"
        type: string
        required: true
        default: "latest"
      force_push:
        description: "Force push to Docker Hub"
        type: choice
        required: false
        default: "false"
        options:
          - "true"
          - "false"
      custom_env:
        description: "Custom env: key=value;key=value"
        type: string
        required: false
        default: ""
      runner_image:
        description: "Runner Image"
        type: string
        required: false
        default: "ubuntu-latest"
  workflow_call:
    inputs:
      app_branch:
        description: "App Branch"
        required: true
        type: string
      tag_repo:
        description: "Tag Push to Repo"
        required: true
        type: string
      force_push:
        description: "Force push to Docker Hub"
        required: true
        type: string
      custom_env:
        description: "Custom env: key=value;key=value"
        required: false
        type: string
      runner_image:
        description: "Runner Image"
        required: false
        type: string
    secrets:
      DOCKER_USERNAME:
        description: "Docker Hub Username"
        required: true
      DOCKER_PASSWORD:
        description: "Docker Hub Password"
        required: true

run-name: Docker - ${{ inputs.app_branch }} - ${{ inputs.tag_repo }}

env:
  app_branch: ${{ inputs.app_branch }}
  tag_repo: ${{ inputs.tag_repo || 'latest' }}
  force_push: ${{ inputs.force_push || 'false' }}
  registry_push: "docker.io"
  dir_app: "application/${{ inputs.app_branch }}"
  compress: "true"
  custom_env: ${{ inputs.custom_env || '' }}

jobs:
  check:
    name: Check Version
    runs-on: ${{ inputs.runner_image || 'ubuntu-latest' }}
    permissions:
      contents: read
      pull-requests: read
    outputs:
      changed: ${{ steps.summary.outputs.changed }}
      version: ${{ steps.summary.outputs.version }}
      consistent: ${{ steps.summary.outputs.consistent }}
    env:
      metadata_image_path: "${{ github.workspace }}/${{ inputs.dir_app }}/metadata_image.json"
      metadata_app_path: "${{ github.workspace }}/${{ inputs.dir_app }}/metadata_app.json"
    steps:
      - name: Checkout ${{ github.repository }}
        uses: actions/checkout@main

      - name: Initialize environment
        id: init
        env:
          DEBIAN_FRONTEND: noninteractive
        working-directory: /
        run: |
          echo -e "Current working directory: $(pwd)"

          packages_install=(
            "ca-certificates"
            "curl"
            "gpg"
            "skopeo"
            "jq"
          )
          sudo -E apt-get -y -qq update
          sudo -E apt-get -y -qq install "${packages_install[@]}"
          sudo -E apt-get -qq -y autoremove --purge
          sudo -E apt-get -qq clean
          sudo -E systemctl daemon-reload

          echo "status=success" | tee -a ${GITHUB_OUTPUT}

      - name: (Env) Load .env files
        id: env-app
        working-directory: "${{ github.workspace }}/${{ env.dir_app }}"
        run: |
          echo "Current working directory: $(pwd)"

          dir_step="env"
          dir_original=$(pwd)
          if [ -d "${dir_step}" ]; then
            cd ./${dir_step}
            echo "Changed to directory: $(pwd)"

            for env_file in ./*.env; do
              if [ -f "${env_file}" ]; then
                echo "Loading env file: ${env_file}"
                cat "${env_file}" | awk -F= '/^[a-zA-Z_][a-zA-Z0-9_]*=/ {printf "%s=%s\n", $1, $2}' | tee -a $GITHUB_ENV
              fi
            done

            cd "${dir_original}"
            echo "Changed back to original directory: $(pwd)"
          else
            echo "No directory found"
          fi

          echo "status=success" | tee -a ${GITHUB_OUTPUT}

      - name: (Env) Load Custom inputs
        id: env-custom
        if: ${{ env.custom_env != '' }}
        env:
          flag_split: ";"
        working-directory: /
        run: |
          echo "${{ env.custom_env }}" | tr '${{ env.flag_split }}' '\n' | tee -a $GITHUB_ENV

      - name: Setup Docker
        id: docker
        if: ${{ 'true' == 'false' }} # disable
        env:
          DEBIAN_FRONTEND: noninteractive
        working-directory: /
        run: |
          # https://docs.docker.com/engine/install/ubuntu/

          # ===== 1. Set up Docker's apt repository =====
          # Add Docker's official GPG key:
          # sudo apt-get update
          # sudo apt-get install ca-certificates curl
          sudo install -m 0755 -d /etc/apt/keyrings
          sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
          sudo chmod a+r /etc/apt/keyrings/docker.asc

          # Add the repository to Apt sources:
          echo \
            "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
            $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
            sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update

          # ===== 2. Install the Docker packages =====
          sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

          docker --version
          echo "status=success" | tee -a ${GITHUB_OUTPUT}

      - name: Setup QEMU
        id: qemu
        uses: docker/setup-qemu-action@master
        with:
          platforms: ${{ env.arch_branch }}

      - name: (MetaData) from DockerHub
        id: meta-image
        env:
          category: "repository"
        run: |
          metadata='{"${{ env.category }}":[]}'
          declare -a repo_array=("${{ env.base_image }}" "${{ env.repo_dockerhub }}:${{ env.tag_repo }}")
          for repo in "${repo_array[@]}"; do
            IFS=',' read -ra platforms <<< "${{ env.arch_branch }}"
            for platform in "${platforms[@]}"; do
              os=$(echo ${platform} | cut -d'/' -f1)
              arch=$(echo ${platform} | cut -d'/' -f2-)
              
              variant=""
              if echo "${arch}" | grep -q "arm/v"; then
                variant=$(echo ${arch} | cut -d'/' -f2)
                arch=$(echo ${arch} | cut -d'/' -f1)
              fi
              
              data_json=$(skopeo inspect \
                --override-os=${os} \
                --override-arch=${arch} \
                ${variant:+--override-variant=${variant}} \
                --format=json \
                docker://docker.io/${repo} | jq .)

              metadata=$(jq \
                --argjson data "${data_json}" \
                --arg platform "${platform}" \
                --arg repo "${repo}" \
                '.${{ env.category }} += [{name: $repo, platform: $platform, data: $data}]' <<< "${metadata}")
            done
          done
          echo "metadata=${metadata}"
          echo "${metadata}" | jq . > ${{ env.metadata_image_path }}
          echo "status=success" | tee -a ${GITHUB_OUTPUT}

      - name: (Check) Layer MetaData ${{ env.base_image }} in ${{ env.repo_dockerhub }}:${{ env.tag_repo }}
        id: check-layer
        if: steps.meta-image.outputs.status == 'success' && !cancelled()
        env:
          category_image: "repository"
        run: |
          changed=false
          metadata_image=$(cat ${{ env.metadata_image_path }})
          IFS=',' read -ra platforms <<< "${{ env.arch_branch }}"
          for platform in "${platforms[@]}"; do
            base_json=$(echo "${metadata_image}" | jq --arg platform "${platform}" --arg repo "${{ env.base_image }}" '
              .${{ env.category_image }}[] | select(.platform == $platform and .name == $repo) | .data
            ')
            repo_json=$(echo "${metadata_image}" | jq --arg platform "${platform}" --arg repo "${{ env.repo_dockerhub }}:${{ env.tag_repo }}" '
              .${{ env.category_image }}[] | select(.platform == $platform and .name == $repo) | .data
            ')
            echo -e "========== Base image: ${{ env.base_image }} ${platform} ==========\n${base_json}"
            echo -e "========== Repo image: ${{ env.repo_dockerhub }}:${{ env.tag_repo }} ${platform} ==========\n${repo_json}"

            missing_layers=$(jq -r \
              --argjson base "$(jq -r '.Layers' <<< "$base_json")" \
              --argjson repo "$(jq -r '.Layers' <<< "$repo_json")" \
              '($base - $repo)' <<< '{}')
            if [ "$(echo "$missing_layers" | jq 'length')" -eq 0 ]; then
              echo "----- All layers are present in ${platform} -----"
            else
              echo -e "----- missing layers in ${platform} -----\n${missing_layers}"
              changed=true
              break
            fi
          done
          echo "changed=${changed}" | tee -a ${GITHUB_OUTPUT}
          echo "status=success" | tee -a ${GITHUB_OUTPUT}

      - name: (MetaData) ${{ env.app_branch }} in Container
        id: meta-app
        if: always() && !cancelled()
        env:
          container_name: "container-test"
          category: "platforms"
          dir_container: "/tmp"
        working-directory: "${{ github.workspace }}/${{ env.dir_app }}"
        run: |
          echo "Current working directory: $(pwd)"

          metadata='{"${{ env.category }}":[]}'
          IFS=',' read -ra platforms <<< "${{ env.arch_branch }}"
          for platform in "${platforms[@]}"; do
            echo "===== Testing Base Image for platform: $platform ====="
            docker pull --platform $platform ${{ env.base_image }}
            docker run \
              --name ${{ env.container_name }} \
              --rm \
              --detach \
              --platform $platform \
              ${{ env.base_image }} \
              /bin/sh -c "uname -a && sleep infinity"

            log_container=$(mktemp)
            docker exec ${{ env.container_name }} mkdir -p ${{ env.dir_container }}

            dir_step="meta-app"
            dir_original=$(pwd)
            if [ -d "${dir_step}" ]; then
              cd ./${dir_step}
              echo "Changed to directory: $(pwd)"

              env_temp=$(mktemp)
              if [ ${{ env.custom_env != '' }} ]; then
                flag_split=";"
                # | sed "s|='|=\"|g" | sed "s|'$|\"|g" | sed "s|^|export '|" | sed "s|$|'|"
                echo "${{ env.custom_env }}" | tr "${flag_split}" '\n' | tee -a ${env_temp}
                docker cp ${env_temp} ${{ env.container_name }}:/tmp/build.env
              fi

              for script_file in ./*.sh; do
                container_script="${{ env.dir_container }}/$(basename ${script_file})"
                script_temp=$(mktemp)
                {
                  echo "#!/bin/sh"
                  printenv | awk -F= '/^[a-zA-Z_][a-zA-Z0-9_]*=/ {printf "%s=\"%s\"\n", $1, $2}'
                  cat "${script_file}"
                } > ${script_temp}

                docker cp ${script_temp} ${{ env.container_name }}:${container_script}
                docker exec ${{ env.container_name }} chmod +x ${container_script}
                docker exec ${{ env.container_name }} sh -c "${container_script}" | tee -a ${log_container}
              done

              cd "${dir_original}"
              echo "Changed back to original directory: $(pwd)"
            else
              echo "No directory found"
            fi

            docker stop ${{ env.container_name }}

            metadata=$(jq \
              --arg platform "${platform}" \
              --arg version "$(awk -F= '/^version=/ {print $2}' ${log_container})" \
              '.${{ env.category }} += [{platform: $platform, version: $version}]' <<< "${metadata}")
          done
          echo "metadata=${metadata}"
          echo "${metadata}" | jq . > ${{ env.metadata_app_path }}
          echo "status=success" | tee -a ${GITHUB_OUTPUT}

      - name: (Check) Version of app
        id: check-version
        if: steps.meta-app.outputs.status == 'success' && !cancelled()
        env:
          category_image: "repository"
          category_app: "platforms"
        run: |
          changed=false
          metadata_image=$(cat ${{ env.metadata_image_path }})
          metadata_app=$(cat ${{ env.metadata_app_path }})
          IFS=',' read -ra platforms <<< "${{ env.arch_branch }}"
          for platform in "${platforms[@]}"; do
            repo_json=$(echo "${metadata_image}" | jq --arg platform "${platform}" --arg repo "${{ env.repo_dockerhub }}:${{ env.tag_repo }}" '
              .${{ env.category_image }}[]
              | select(.platform == $platform and .name == $repo) 
              | .data
            ')
            app_json=$(echo "${metadata_app}" | jq --arg platform "${platform}" '
              .${{ env.category_app }}[]
              | select(.platform == $platform)
            ')

            echo "repo_json=${repo_json}"
            echo "app_json=${app_json}"

            repo_labels=$(echo "${repo_json}" | jq -r '.Labels')
            if [[ "${repo_labels}" == "null" || -z "${repo_labels}" ]]; then
              echo "Labels are either null or empty."
              changed=true
              break
            fi

            repo_version=$(echo "${repo_labels}" | jq -r '.version')
            app_version=$(echo "${app_json}" | jq -r '.version')
            if [[ "${repo_version}" != "${app_version}" ]]; then
              echo "${platform} Version mismatch: repo_version=${repo_version}, app_version=${app_version}"
              changed=true
            else
              echo "${platform} Version match: repo_version=${repo_version}, app_version=${app_version}"
            fi
          done

          echo "changed=${changed}" | tee -a ${GITHUB_OUTPUT}

      - name: Summary
        id: summary
        if: always() && !cancelled()
        env:
          category_image: "repository"
          category_app: "platforms"
          platform_prefer: "amd64"
        run: |
          metadata_app=$(cat ${{ env.metadata_app_path }})

          # ----- Check if versions are consistent -----
          if [ "$(jq -r ".${category_app}[] | select(.version != null) | .version" <<< "${metadata_app}" | sort -u | wc -l)" -ne 1 ]; then
            version=$(jq -r ".${category_app}[] | select(.platform == \"${platform_prefer}\") | .version" <<< "${metadata_app}")
            consistent=false
            echo "Versions are not consistent across ${arch_branch}, using ${platform_prefer} version: ${version}"
          else
            version=$(jq -r ".${category_app}[].version" <<< "${metadata_app}" | sort -u)
            consistent=true
            echo "Versions are consistent across ${arch_branch}, using unified version: ${version}"
          fi
          echo "version=${version}" | tee -a ${GITHUB_OUTPUT}
          echo "consistent=${consistent}" | tee -a ${GITHUB_OUTPUT}

          # ----- Check changed -----
          if [ "${{ steps.check-layer.outputs.changed || 'true' }}" != 'true' ] && \
            [ "${{ steps.check-version.outputs.changed || 'true' }}" != 'true' ] && \
            [ "${{ env.force_push || 'false' }}" != 'true' ]; then
              changed=false
          else
              changed=true
          fi
          echo "changed=${changed}" | tee -a ${GITHUB_OUTPUT}

  build:
    name: Build Docker Image
    runs-on: ${{ inputs.runner_image || 'ubuntu-latest' }}
    needs: check
    if: needs.check.outputs.changed == 'true' && !cancelled()
    permissions:
      contents: write
      pull-requests: write
    env:
      registry_local: "localhost:5000"
      version: ${{ needs.check.outputs.version || 'null' }}
      consistent: ${{ needs.check.outputs.consistent || 'false'}}
    steps:
      - name: Checkout ${{ github.repository }}
        uses: actions/checkout@main

      - name: (Log in) to Docker Hub
        uses: docker/login-action@master
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Initialize environment
        id: init
        env:
          DEBIAN_FRONTEND: noninteractive
        working-directory: /
        run: |
          echo -e "Current working directory: $(pwd)"

          packages_install=(
            "ca-certificates"
            "curl"
            "gpg"
            "skopeo"
            "jq"
            "xz-utils"
          )
          sudo -E apt-get -y -qq update
          sudo -E apt-get -y -qq install "${packages_install[@]}"
          sudo -E apt-get -qq -y autoremove --purge
          sudo -E apt-get -qq clean
          sudo -E systemctl daemon-reload

          echo "status=success" | tee -a ${GITHUB_OUTPUT}

      - name: (Env) Load .env files
        id: env-app
        working-directory: "${{ github.workspace }}/${{ env.dir_app }}"
        run: |
          echo "Current working directory: $(pwd)"

          dir_step="env"
          dir_original=$(pwd)
          if [ -d "${dir_step}" ]; then
            cd ./${dir_step}
            echo "Changed to directory: $(pwd)"

            for env_file in ./*.env; do
              if [ -f "${env_file}" ]; then
                echo "Loading env file: ${env_file}"
                cat "${env_file}" | awk -F= '/^[a-zA-Z_][a-zA-Z0-9_]*=/ {printf "%s=%s\n", $1, $2}' | tee -a $GITHUB_ENV
              fi
            done

            cd "${dir_original}"
            echo "Changed back to original directory: $(pwd)"
          else
            echo "No directory found"
          fi

          echo "status=success" | tee -a ${GITHUB_OUTPUT}

      - name: (Env) Load Custom inputs
        id: env-custom
        if: ${{ env.custom_env != '' }}
        env:
          flag_split: ";"
        working-directory: /
        run: |
          echo "${{ env.custom_env }}" | tr '${{ env.flag_split }}' '\n' | tee -a $GITHUB_ENV

      - name: Setup Docker
        id: docker
        env:
          DEBIAN_FRONTEND: noninteractive
        working-directory: /
        run: |
          # https://docs.docker.com/engine/install/ubuntu/

          # ===== 1. Set up Docker's apt repository =====
          # Add Docker's official GPG key:
          # sudo apt-get update
          # sudo apt-get install ca-certificates curl
          sudo install -m 0755 -d /etc/apt/keyrings
          sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
          sudo chmod a+r /etc/apt/keyrings/docker.asc

          # Add the repository to Apt sources:
          echo \
            "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
            $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
            sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update

          # ===== 2. Install the Docker packages =====
          sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

          docker --version
          echo "status=success" | tee -a ${GITHUB_OUTPUT}

      - name: Setup QEMU
        id: qemu
        uses: docker/setup-qemu-action@master
        with:
          platforms: ${{ env.arch_branch }}

      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master
        with:
          version: latest
          driver-opts: network=host

      - name: (Service) Local Registry
        id: registry
        env:
          DEBIAN_FRONTEND: noninteractive
        working-directory: /
        run: |
          docker pull registry:latest
          docker run \
            --name registry \
            --detach \
            --network host \
            registry:latest
          echo "status=success" | tee -a ${GITHUB_OUTPUT}

      - name: Build and push to local registry
        id: build
        working-directory: "${{ github.workspace }}/${{ env.dir_app }}"
        run: |
          echo "Current working directory: $(pwd)"

          dir_step="build"
          dir_original=$(pwd)
          if [ -d "${dir_step}" ]; then
            cd ./${dir_step}
            echo "Changed to directory: $(pwd)"

            for script_file in ./*.sh; do
              chmod +x "${script_file}"
              sh "${script_file}"
            done

            cd "${dir_original}"
            echo "Changed back to original directory: $(pwd)"
          else
            echo "No directory found"
          fi

          echo "status=success" | tee -a ${GITHUB_OUTPUT}

      - name: (Inspect) Layers with skopeo
        id: inspect
        # if: ${{ 'true' == 'false' }} # disable
        working-directory: "${{ github.workspace }}/${{ env.dir_app }}"
        run: |
          echo "Current working directory: $(pwd)"

          IFS=',' read -ra platforms <<< "${{ env.arch_branch }}"
          for platform in "${platforms[@]}"; do
            os=$(echo ${platform} | cut -d'/' -f1)
            arch=$(echo ${platform} | cut -d'/' -f2-)
            
            variant=""
            if echo "${arch}" | grep -q "arm/v"; then
              variant=$(echo ${arch} | cut -d'/' -f2)
              arch=$(echo ${arch} | cut -d'/' -f1)
            fi
            
            skopeo inspect \
              --override-os=${os} \
              --override-arch=${arch} \
              ${variant:+--override-variant=${variant}} \
              --format=json \
              --tls-verify=false \
              docker://${{ env.registry_local }}/${{ env.repo_dockerhub }}:${{ env.tag_repo }}
          done
          echo "status=success" | tee -a ${GITHUB_OUTPUT}

      - name: (Test) Docker image
        id: test
        env:
          container_name: container-test
          dir_container: "/tmp"
          time_sleep: ${{ env.time_sleep || '3' }}
        working-directory: "${{ github.workspace }}/${{ env.dir_app }}"
        run: |
          echo "Current working directory: $(pwd)"

          IFS=',' read -ra platforms <<< "${{ env.arch_branch }}"
          for platform in "${platforms[@]}"; do
            docker pull --platform $platform ${{ env.registry_local }}/${{ env.repo_dockerhub }}:${{ env.tag_repo }}
            docker run \
              --name ${{ env.container_name }} \
              --rm \
              --detach \
              --platform $platform \
              ${{ env.registry_local }}/${{ env.repo_dockerhub }}:${{ env.tag_repo }}
              # /bin/sh -c "uname -a && sleep infinity"

            dir_step="test"
            dir_original=$(pwd)
            if [ -d "${dir_step}" ]; then
              cd ./${dir_step}
              echo "Changed to directory: $(pwd)"

              set +e
              log_container=$(mktemp)
              # docker exec -u root ${{ env.container_name }} mkdir -p ${{ env.dir_container }}
              
              for script_file in ./*.sh; do
                container_script="${{ env.dir_container }}/$(basename ${script_file})"
                script_temp=$(mktemp)
                {
                  echo "#!/bin/sh"
                  printenv | awk -F= '/^[a-zA-Z_][a-zA-Z0-9_]*=/ {printf "%s=\"%s\"\n", $1, $2}'
                  cat "${script_file}"
                } > ${script_temp}

                docker cp ${script_temp} ${{ env.container_name }}:${container_script}
                docker exec -u root ${{ env.container_name }} chmod +x ${container_script}
                docker exec -u root ${{ env.container_name }} sh -c "${container_script}" | tee -a ${log_container}
              done
              set -e

              cd "${dir_original}"
              echo "Changed back to original directory: $(pwd)"
            else
              echo "No directory found"
            fi
            echo "Sleep for ${{ env.time_sleep }} seconds"
            sleep "${{ env.time_sleep }}"
            docker logs ${{ env.container_name }}
            docker stop ${{ env.container_name }}
          done
          echo "status=success" | tee -a ${GITHUB_OUTPUT}

      - name: (Output) Save
        id: output
        # if: ${{ 'true' == 'false' }} # disable
        env:
          dir_output: "${{ github.workspace }}/${{ env.dir_app }}/output"
          target_ext: "tar"
        working-directory: "${{ github.workspace }}/${{ env.dir_app }}"
        run: |
          echo "Current working directory: $(pwd)"

          mkdir -p ${{ env.dir_output }}

          IFS=',' read -ra platforms <<< "${{ env.arch_branch }}"
          for platform in "${platforms[@]}"; do
            target_file="${{ env.app_branch }}_${{ env.tag_repo }}_${{ env.version }}_$(echo ${platform} | tr '/' '_').${{ env.target_ext }}"
            
            docker pull --platform ${platform} ${{ env.registry_local }}/${{ env.repo_dockerhub }}:${{ env.tag_repo }}
            docker tag ${{ env.registry_local }}/${{ env.repo_dockerhub }}:${{ env.tag_repo }} ${{ env.repo_dockerhub }}:${{ env.tag_repo }}
            docker save --output ${{ env.dir_output }}/${target_file} ${{ env.repo_dockerhub }}:${{ env.tag_repo }}
            
            echo "Exported ${platform} image to ${target_file}"
          done
          ls -lh "${{ env.dir_output }}"

          if [ "$(echo ${{ env.compress }} | tr '[:upper:]' '[:lower:]')" != "true" ]; then
            echo "compress=false" | tee -a $GITHUB_ENV
          else
            echo "compress=true" | tee -a $GITHUB_ENV
          fi

          echo "dir_output=${dir_output}" | tee -a $GITHUB_ENV
          echo "target_ext=${target_ext}" | tee -a $GITHUB_ENV
          echo "target_ext=${target_ext}" | tee -a ${GITHUB_OUTPUT}
          echo "status=success" | tee -a ${GITHUB_OUTPUT}

      - name: (Output) Compress
        id: output-compress
        if: ${{ env.compress == 'true' }}
        env:
          dir_output: ${{ env.dir_output }}
          target_ext: "${{ env.target_ext }}"
        working-directory: "${{ env.dir_output }}"
        run: |
          echo -e "Current working directory: $(pwd)"
          ls -lh ./

          free -h
          available_mem=$(free -m | awk '/^Mem:/{print $7}')
          echo "Available memory: ${available_mem} MiB"
          reserve_mem=2048
          if [ "${available_mem}" -gt 6144 ]; then
            memlimit=$((${available_mem} - ${reserve_mem}))
            memlimit="${memlimit}MiB"
          else
            memlimit="4GiB"
          fi
          echo "Set memlimit: ${memlimit}"

          for file in ${{ env.dir_output }}/*.${{ env.target_ext }}; do
            if [[ ! -d "${file}" ]]; then
              # For compression level -9, each thread may use approximately 67 MiB to 768 MiB or more of memory
              # check: crc32, sha256, sha512
              xz --compress \
                --threads=0 \
                -9 \
                --extreme \
                --memlimit-compress=${memlimit} \
                --check=sha256 \
                --verbose \
                --keep \
                "${file}"
            fi
          done

          ls -lh ./
          echo "target_ext=xz" | tee -a $GITHUB_ENV
          echo "status=success" | tee -a ${GITHUB_OUTPUT}

      - name: (Output) Check
        id: output-check
        if: steps.output.outputs.status == 'success' && !cancelled()
        # if: ${{ 'true' == 'false' }} # disable
        env:
          metadata_sum_path: "${{ github.workspace }}/metadata_sum.json"
          category: "files"
          target_ext: "${{ steps.output.outputs.target_ext }}"
        working-directory: "${{ env.dir_output }}"
        run: |
          echo -e "Current working directory: $(pwd)"
          ls -lh ./

          metadata='{"${{ env.category }}":[]}'
          for file in ./*.${{ env.target_ext }}; do
            if [[ ! -d "${file}" ]]; then
              read -r checksum filename <<< "$(sha256sum "${file}")"
              filename=$(basename "${filename}")
              metadata=$(jq \
                --arg filename "${filename}" \
                --arg checksum "${checksum}" \
                '.${{ env.category }} += [{filename: $filename, checksum: $checksum}]' <<< "${metadata}")
            fi
          done
          echo "metadata=${metadata}"
          echo "${metadata}" | jq . > ${{ env.metadata_sum_path }}

          echo "timestamp=$(date +"%y%mw%V")" | tee -a ${GITHUB_OUTPUT}
          echo "metadata_sum_path=${metadata_sum_path}" | tee -a ${GITHUB_OUTPUT}
          echo "status=success" | tee -a ${GITHUB_OUTPUT}

      - name: (release.md) Generate
        id: release-md
        # if: ${{ 'true' == 'false' }} # disable
        env:
          release_md: "${{ github.workspace }}/${{ env.dir_app }}/release.md"
          metadata_sum_path: ${{ steps.output-check.outputs.metadata_sum_path }}
        working-directory: "${{ github.workspace }}/${{ env.dir_app }}"
        run: |
          echo "Current working directory: $(pwd)"

          release_md_dir=$(dirname ${{ env.release_md }})
          mkdir -p ${release_md_dir}
          : > ${{ env.release_md }}

          record_to_markdown() {
            local title="$1"
            local content="$2"
            local code_block="${3:-}"
            local format="\n### %s\n%s\n"

            if [[ -n "${code_block}" ]]; then
              format="\n### %s\n\n<details>\n<summary>%s</summary>\n\n\`\`\`%s\n%s\n\`\`\`\n\n</details>\n"
              printf "${format}" "${title}" "${title}" "${code_block}" "${content}" | tee -a ${{ env.release_md }}
            else
              printf "${format}" "${title}" "${content}" | tee -a ${{ env.release_md }}
            fi
          }

          record_to_markdown "Timestamp" "- [x] $(date +"%Y-%m-%d %H:%M:%S %z")"

          IFS=',' read -ra registries <<< "${{ env.registry_push }}" >> ${{ env.release_md }}
          for registry_remote in "${registries[@]}"; do
            echo -e "### Info\n" >> ${{ env.release_md }}
            echo "Registry: ${registry_remote}" >> ${{ env.release_md }}
            echo "Repository: ${{ env.repo_dockerhub }}" >> ${{ env.release_md }}
            echo "docker pull ${registry_remote}/${{ env.repo_dockerhub }}:\*"  >> ${{ env.release_md }}
            echo "docker load < \*.xz" >> ${{ env.release_md }}
            echo "xz --decompress --verbose *.xz" >> ${{ env.release_md }}
            echo "docker load < \*.tar" >> ${{ env.release_md }}
          done

          sum_json_content=$(jq '.' "${{ env.metadata_sum_path }}")
          record_to_markdown "sha256sum" "${sum_json_content}" "json"

          cat ${{ env.release_md }}
          echo "release_md=${release_md}" | tee -a $GITHUB_ENV
          echo "status=success" | tee -a ${GITHUB_OUTPUT}

      - name: (Push) Image to ${{ env.registry_push }}
        id: push
        continue-on-error: true # 添加此行，允许此步骤失败但继续执行后续步骤
        # if: ${{ 'true' == 'false' }} # disable
        working-directory: "${{ github.workspace }}/${{ env.dir_app }}"
        run: |
          echo "Current working directory: $(pwd)"
          declare -a tag_array=("${{ env.tag_repo }}")
          tag_version="${{ env.tag_repo }}-${{ env.version }}"

          dir_step="push"
          dir_original=$(pwd)
          if [ -d "${dir_step}" ]; then
            cd ./${dir_step}
            echo "Changed to directory: $(pwd)"

            for script_file in ./*.sh; do
              chmod +x "${script_file}"
              source "${script_file}"
            done

            cd "${dir_original}"
            echo "Changed back to original directory: $(pwd)"
          else
            echo "No directory found"
          fi

          if [ "${{ env.consistent }}" == "true" ] && [ -n "${tag_version}" ]; then
            tag_array+=("${tag_version}")
          fi

          IFS=',' read -ra registries <<< "${{ env.registry_push }}"
          for registry_remote in "${registries[@]}"; do
            for tag_each in "${tag_array[@]}"; do
              docker buildx imagetools create --tag "${registry_remote}/${{ env.repo_dockerhub }}:${tag_each}" "${{ env.registry_local }}/${{ env.repo_dockerhub }}:${{ env.tag_repo }}" || echo "Failed to push ${tag_each} to ${registry_remote}, but continuing..."
            done
          done

          echo "status=success" | tee -a ${GITHUB_OUTPUT}

      - name: (Upload) to Release
        id: upload-release
        # 修改条件判断，不再依赖push步骤的状态，只检查output步骤的状态
        if: steps.output.outputs.status == 'success' && !cancelled()
        # if: ${{ 'true' == 'false' }} # disable
        uses: ncipollo/release-action@main
        env:
          dir_output: "${{ env.dir_output }}"
          target_ext: "${{ env.target_ext }}"
          release_md: "${{ env.release_md }}"
        with:
          name: "${{ env.repo_dockerhub }}"
          tag: "${{ env.app_branch }}"
          artifacts: "${{ env.dir_output }}/*.${{ env.target_ext }}"
          allowUpdates: true
          removeArtifacts: false
          replacesArtifacts: true
          token: "${{ secrets.GITHUB_TOKEN }}"
          bodyFile: "${{ env.release_md }}"

      - name: (Upload) to artifacts
        id: upload-artifact
        if: ${{ 'true' == 'false' }} # disable
        uses: actions/upload-artifact@main
        with:
          name: "${{ env.app_branch }}"
          path: "${{ env.dir_output }}/*.${{ env.target_ext }}"
