name: (Dev) meta-app

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      app_branch:
        description: "App Branch"
        type: string
        required: true
        default: "adguardvpn-cli"
      tag_repo:
        description: "Tag Push to Repo"
        type: string
        required: true
        default: "latest"
      custom_env:
        description: "key=value;key=value"
        type: string
        required: false
        default: ""

env:
  app_branch: ${{ inputs.app_branch }}
  tag_repo: ${{ inputs.tag_repo || 'latest' }}
  custom_env: ${{ inputs.custom_env || '' }}
  dir_app: "application/${{ inputs.app_branch }}"

jobs:
  check:
    name: Test meta-app
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      pull-requests: read
    steps:
      - name: Checkout ${{ github.repository }}
        uses: actions/checkout@main

      - name: Initialize environment - ${{ env.app_branch }} - ${{ env.tag_repo }}
        id: init
        env:
          DEBIAN_FRONTEND: noninteractive
        working-directory: /
        run: |
          echo -e "Current working directory: $(pwd)"
          packages_install=(
            "curl"
          )
          packages_extra=(
            "skopeo"
            "jq"
          )
          sudo -E apt-get -qq -y update
          sudo -E apt-get -y install "${packages_install[@]}"
          sudo -E apt-get -y install "${packages_extra[@]}"
          sudo -E apt-get -qq -y autoremove --purge
          sudo -E apt-get -qq clean
          echo "status=success" | tee -a ${GITHUB_OUTPUT}

      - name: Load Env
        id: env-app
        working-directory: "${{ github.workspace }}/${{ env.dir_app }}"
        run: |
          echo "Current working directory: $(pwd)"

          dir_step="env"
          dir_original=$(pwd)
          if [ -d "${dir_step}" ]; then
            cd ./${dir_step}
            echo "Changed to directory: $(pwd)"

            for env_file in ./*.env; do
              if [ -f "${env_file}" ]; then
                echo "Loading env file: ${env_file}"
                cat "${env_file}" | awk -F= '/^[a-zA-Z_][a-zA-Z0-9_]*=/ {printf "%s=%s\n", $1, $2}' | tee -a $GITHUB_ENV
              fi
            done

            cd "${dir_original}"
            echo "Changed back to original directory: $(pwd)"
          else
            echo "No directory found"
          fi

          echo "status=success" | tee -a ${GITHUB_OUTPUT}

      - name: Load Custom Environment Variables
        id: env-custom
        if: ${{ env.custom_env != '' }}
        env:
          flag_split: ";"
        run: |
          echo "${{ env.custom_env }}" | tr "${flag_split}" '\n' | tee -a $GITHUB_ENV

      - name: Setup Docker
        id: docker
        env:
          DEBIAN_FRONTEND: noninteractive
        working-directory: /
        run: |
          # https://docs.docker.com/engine/install/ubuntu/

          # ===== 1. Set up Docker's apt repository =====
          # Add Docker's official GPG key:
          sudo apt-get update
          sudo apt-get install ca-certificates curl
          sudo install -m 0755 -d /etc/apt/keyrings
          sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
          sudo chmod a+r /etc/apt/keyrings/docker.asc

          # Add the repository to Apt sources:
          echo \
            "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
            $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
            sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update

          # ===== 2. Install the Docker packages =====
          sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

          docker --version
          echo "status=success" | tee -a ${GITHUB_OUTPUT}

      - name: Setup QEMU
        id: qemu
        uses: docker/setup-qemu-action@master
        with:
          platforms: ${{ env.arch_branch }}

      - name: (MetaData) ${{ env.app_branch }} in Container
        id: meta-app
        if: always() && !cancelled()
        env:
          container_name: "container-test"
          category: "platforms"
          dir_container: "/tmp"
        working-directory: "${{ github.workspace }}/${{ env.dir_app }}"
        run: |
          echo "Current working directory: $(pwd)"

          metadata='{"${{ env.category }}":[]}'
          IFS=',' read -ra platforms <<< "${{ env.arch_branch }}"
          for platform in "${platforms[@]}"; do
            echo "===== Testing Base Image for platform: $platform ====="
            docker pull --platform $platform ${{ env.base_image }}
            docker run \
              --name ${{ env.container_name }} \
              --rm \
              --detach \
              --platform $platform \
              ${{ env.base_image }} \
              /bin/sh -c "uname -a && sleep infinity"

            log_container=$(mktemp)
            docker exec ${{ env.container_name }} mkdir -p ${{ env.dir_container }}

            dir_step="meta-app"
            dir_original=$(pwd)
            if [ -d "${dir_step}" ]; then
              cd ./${dir_step}
              echo "Changed to directory: $(pwd)"

              env_temp=$(mktemp)
              if [ ${{ env.custom_env != '' }} ]; then
                flag_split=";"
                # | sed "s|='|=\"|g" | sed "s|'$|\"|g" | sed "s|^|export '|" | sed "s|$|'|"
                echo "${{ env.custom_env }}" | tr "${flag_split}" '\n' | tee -a ${env_temp}
                docker cp ${env_temp} ${{ env.container_name }}:/tmp/build.env
              fi

              for script_file in ./*.sh; do
                container_script="${{ env.dir_container }}/$(basename ${script_file})"
                script_temp=$(mktemp)
                {
                  echo "#!/bin/sh"
                  printenv | awk -F= '/^[a-zA-Z_][a-zA-Z0-9_]*=/ {printf "%s=\"%s\"\n", $1, $2}'
                  cat "${script_file}"
                } >> ${script_temp}

                docker cp ${script_temp} ${{ env.container_name }}:${container_script}
                docker exec ${{ env.container_name }} chmod +x ${container_script}
                docker exec ${{ env.container_name }} sh -c "${container_script}" | tee -a ${log_container}
              done

              cd "${dir_original}"
              echo "Changed back to original directory: $(pwd)"
            else
              echo "No directory found"
            fi

            docker stop ${{ env.container_name }}

            metadata=$(jq \
              --arg platform "${platform}" \
              --arg version "$(awk -F= '/^version=/ {print $2}' ${log_container})" \
              '.${{ env.category }} += [{platform: $platform, version: $version}]' <<< "${metadata}")
          done
          echo "metadata=${metadata}"
          # echo "${metadata}" | jq . > ${{ env.metadata_app_path }}
          echo "status=success" | tee -a ${GITHUB_OUTPUT}
